// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name NbmapNavigation
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFAudio
import AVFoundation
import CarPlay
import CoreGraphics
import CoreLocation
import DeveloperToolsSupport
import Foundation
import MobileCoreServices
import NBTurf
import Nbmap
@_spi(NBInternal) import NbmapCoreNavigation
@_exported import NbmapNavigation
import Swift
import SwiftUI
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Nbmap.NGLMapView {
  @_Concurrency.MainActor @preconcurrency public var showsTraffic: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var showsIncidents: Swift.Bool {
    get
    set
  }
}
public protocol BannerContainerViewDelegate : AnyObject, NbmapCoreNavigation.UnimplementedLogging {
  func bannerContainerView(_ bannerContainerView: NbmapNavigation.BannerContainerView, stateWillChangeTo state: NbmapNavigation.BannerContainerView.State)
  func bannerContainerView(_ bannerContainerView: NbmapNavigation.BannerContainerView, stateDidChangeTo state: NbmapNavigation.BannerContainerView.State)
  func bannerContainerView(_ bannerContainerView: NbmapNavigation.BannerContainerView, didExpandTo fraction: CoreFoundation.CGFloat)
}
extension NbmapNavigation.BannerContainerViewDelegate {
  public func bannerContainerView(_: NbmapNavigation.BannerContainerView, stateWillChangeTo _: NbmapNavigation.BannerContainerView.State)
  public func bannerContainerView(_: NbmapNavigation.BannerContainerView, stateDidChangeTo _: NbmapNavigation.BannerContainerView.State)
  public func bannerContainerView(_: NbmapNavigation.BannerContainerView, didExpandTo _: CoreFoundation.CGFloat)
}
@_inheritsConvenienceInitializers @objc(NBInstructionLabel) @_Concurrency.MainActor @preconcurrency open class InstructionLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol VisualInstructionDelegate : AnyObject, NbmapCoreNavigation.UnimplementedLogging {
  func label(_ label: NbmapNavigation.InstructionLabel, willPresent instruction: NbmapCoreNavigation.VisualInstruction, as presented: Foundation.NSAttributedString) -> Foundation.NSAttributedString?
}
extension NbmapNavigation.VisualInstructionDelegate {
  public func label(_: NbmapNavigation.InstructionLabel, willPresent _: NbmapCoreNavigation.VisualInstruction, as _: Foundation.NSAttributedString) -> Foundation.NSAttributedString?
}
@_inheritsConvenienceInitializers @objc(NBManeuversStyleKit) public class ManeuversStyleKit : ObjectiveC.NSObject {
  @objc dynamic public class func drawArrow180right(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArrowright(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArrowslightright(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArrowstraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArrowsharpright(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArrive(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawStarting(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawDestination(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawMerge(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawFork(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawOfframp(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArriveright(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawRoundabout(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), roundaboutAngle: CoreFoundation.CGFloat = 90, roundaboutRadius: CoreFoundation.CGFloat = 6.5)
  @objc dynamic public class func drawArriveright2(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: NbmapNavigation.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc(ManeuversStyleKitResizingBehavior) public enum ResizingBehavior : Swift.Int {
    case aspectFit
    case aspectFill
    case stretch
    case center
    public func apply(rect: CoreFoundation.CGRect, target: CoreFoundation.CGRect) -> CoreFoundation.CGRect
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayManager : CarPlay.CPSearchTemplateDelegate {
  public static let CarPlayGeocodedPlacemarkKey: Swift.String
  @objc dynamic public func searchTemplate(_ searchTemplate: CarPlay.CPSearchTemplate, updatedSearchText searchText: Swift.String, completionHandler: @escaping ([CarPlay.CPListItem]) -> Swift.Void)
  @objc dynamic public func searchTemplateSearchButtonPressed(_: CarPlay.CPSearchTemplate)
  @objc dynamic public func searchTemplate(_ searchTemplate: CarPlay.CPSearchTemplate, selectedResult item: CarPlay.CPListItem, completionHandler: @escaping () -> Swift.Void)
  public func nbSearchTemplate(_: CarPlay.CPSearchTemplate, updatedSearchText searchText: Swift.String, completionHandler: @escaping ([CarPlay.CPListItem]) -> Swift.Void)
  public func carPlayManager(_: CarPlay.CPSearchTemplate, selectedResult item: CarPlay.CPListItem, completionHandler: @escaping () -> Swift.Void)
}
public let NBRouteLineWidthByZoomLevel: [Swift.Int : Foundation.NSExpression]
public var navigationMapViewMinimumDistanceForOverheadZooming: Swift.Double
public let nbCurrentLegAttribute: Swift.String
public let nbCongestionAttribute: Swift.String
public let restrictedRoadClassAttribute: Swift.String
public let navigationViewMinimumVolumeForWarning: Swift.Float
public var gradientCongestionFadingDistance: Swift.Double
public typealias CarPlayUserInfo = [Swift.String : Any?]
public var level1AlertDuration: Swift.Double
public var level2AlertDuration: Swift.Double
public var level3AlertDuration: Swift.Double
public var level4AlertDuration: Swift.Double
public var level5AlertDuration: Swift.Double
public var level6AlertDuration: Swift.Double
extension NbmapNavigation.ArrivedViewController : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forDismissed _: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forPresented _: UIKit.UIViewController, presenting _: UIKit.UIViewController, source _: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func interactionControllerForDismissal(using _: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class ArrivalTitleLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class ArrivalDestinationLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class ArrivalAddressLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class ArrivalBackgroundView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency public class ArrivedViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency open var destination: NbmapCoreNavigation.Waypoint? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var dataTracking: NbmapCoreNavigation.DataTracking?
  @objc @_Concurrency.MainActor @preconcurrency public init(dataTracking: NbmapCoreNavigation.DataTracking?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @objc deinit
}
@objc(NavigationPreviewController) @_Concurrency.MainActor @preconcurrency open class NavigationPreviewController : UIKit.UIViewController, Nbmap.NGLMapViewDelegate {
  @_Concurrency.MainActor @preconcurrency public var navigationMapView: NbmapNavigation.NavigationMapView? {
    get
    set
  }
  @objc(initWithRoute:styles:) @_Concurrency.MainActor @preconcurrency public init(route: NbmapCoreNavigation.Route, style: NbmapNavigation.Style = DayStyle())
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc public func mapViewDidFinishLoadingMap(_: Nbmap.NGLMapView)
  @objc deinit
}
public enum SpeechFailureAction : Swift.String {
  case mix
  case duck
  case unduck
  case play
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SpeechError : Foundation.LocalizedError {
  case unableToControlAudio(instruction: NbmapCoreNavigation.SpokenInstruction?, action: NbmapNavigation.SpeechFailureAction, underlying: (any Swift.Error)?)
  case unableToInitializePlayer(playerType: AVFAudio.AVAudioPlayer.Type, instruction: NbmapCoreNavigation.SpokenInstruction, synthesizer: Any?, underlying: any Swift.Error)
  case undefinedSpeechLocale(instruction: NbmapCoreNavigation.SpokenInstruction)
  case unsupportedLocale(locale: Foundation.Locale)
}
extension Foundation.NSAttributedString {
  public func pronounced(_ pronunciation: Swift.String) -> Foundation.NSAttributedString
}
@objc(NBRouteVoiceController) open class RouteVoiceController : ObjectiveC.NSObject, AVFAudio.AVSpeechSynthesizerDelegate {
  @objc public var playRerouteSound: Swift.Bool
  @objc public var rerouteSoundPlayer: AVFAudio.AVAudioPlayer? {
    get
  }
  weak public var voiceControllerDelegate: (any NbmapNavigation.VoiceControllerDelegate)?
  public var speechSynthesizer: any NbmapNavigation.SpeechSynthesizing
  public init(speechSynthesizer: (any NbmapNavigation.SpeechSynthesizing)? = nil)
  @objc deinit
  @objc public func speechSynthesizer(_: AVFAudio.AVSpeechSynthesizer, didFinish _: AVFAudio.AVSpeechUtterance)
  @objc open func didPassSpokenInstructionPoint(notification: Foundation.NSNotification)
}
public protocol VoiceControllerDelegate : AnyObject, NbmapCoreNavigation.UnimplementedLogging {
  func voiceController(_ voiceController: NbmapNavigation.RouteVoiceController, spokenInstructionsDidFailWith error: any Swift.Error)
}
extension NbmapNavigation.VoiceControllerDelegate {
  public func routeVoiceController(_: NbmapNavigation.RouteVoiceController, encountered _: NbmapNavigation.SpeechError)
}
extension NbmapCoreNavigation.CongestionLevel {
  public var asCPTimeRemainingColor: CarPlay.CPTimeRemainingColor {
    get
  }
}
extension Swift.Dictionary where Key == Swift.Int, Value : Foundation.NSExpression {
  public func multiplied(by factor: Swift.Double) -> [Swift.Int : Foundation.NSExpression]
}
public typealias ContainerViewController = UIKit.UIViewController & NbmapNavigation.NavigationComponent
@objc(NBNavigationViewController) @_Concurrency.MainActor @preconcurrency open class NavigationViewController : UIKit.UIViewController, NbmapNavigation.NavigationStatusPresenter {
  @_Concurrency.MainActor @preconcurrency public var navigationView: NbmapNavigation.NavigationView {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var navigationMapView: NbmapNavigation.NavigationMapView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var route: NbmapCoreNavigation.Route? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var routes: [NbmapCoreNavigation.Route] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var routeIndex: Swift.Int {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var pendingCamera: Nbmap.NGLMapCamera?
  @objc @_Concurrency.MainActor @preconcurrency public var origin: (any Nbmap.NGLAnnotation)?
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any NbmapNavigation.NavigationViewControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var voiceController: NbmapNavigation.RouteVoiceController!
  @_Concurrency.MainActor @preconcurrency public var navigationService: (any NbmapCoreNavigation.NavigationService)! {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var snapsUserLocationAnnotationToRoute: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var sendsNotifications: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var navigationOptions: NbmapNavigation.NavigationOptions?
  @_Concurrency.MainActor @preconcurrency public var routeOptions: NbmapCoreNavigation.RouteOptions? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func traversingTunnel() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var usesNightStyleWhileInTunnel: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var navigationDataEventTracking: (any NbmapCoreNavigation.NavigationEventTracking)?
  @_Concurrency.MainActor @preconcurrency public var routeLineTracksTraversal: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var showsArrivalWaypointSheet: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var showsSpeed: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var detailedFeedbackEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var floatingButtons: [UIKit.UIButton]? {
    get
    set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var automaticallyAdjustsStyleForTimeOfDay: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var shouldManageApplicationIdleTimer: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var isUsedInConjunctionWithCarPlayWindow: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var annotatesSpokenInstructions: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public func show(_ status: NbmapNavigation.StatusView.Status)
  @_Concurrency.MainActor @preconcurrency public func hide(_ status: NbmapNavigation.StatusView.Status)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency required public init(for routes: [NbmapCoreNavigation.Route]? = nil, routeIndex: Swift.Int? = 0, navigationOptions: NbmapNavigation.NavigationOptions? = nil, routeOptions: NbmapCoreNavigation.RouteOptions? = nil)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLayoutSubviews()
  @available(iOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public class func carPlayManager(_: NbmapNavigation.CarPlayManager, didBeginNavigationWith navigationService: any NbmapCoreNavigation.NavigationService, window: UIKit.UIWindow)
  @available(iOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public class func carPlayManagerDidEndNavigation(_: NbmapNavigation.CarPlayManager, window: UIKit.UIWindow)
}
extension NbmapNavigation.NavigationViewController {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mapViewDidFinishRenderingFrame(_ mapView: Nbmap.NGLMapView, fullyRendered: Swift.Bool)
}
extension NbmapNavigation.NavigationViewController : NbmapCoreNavigation.NavigationServiceDelegate {
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didUpdate progress: NbmapCoreNavigation.RouteProgress, with location: CoreLocation.CLLocation, rawLocation: CoreLocation.CLLocation)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didPassSpokenInstructionPoint instruction: NbmapCoreNavigation.SpokenInstruction, routeProgress: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didPassVisualInstructionPoint instruction: NbmapCoreNavigation.VisualInstructionBanner, routeProgress: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willRerouteFrom location: CoreLocation.CLLocation)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, willTakeAlternativeRoute route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, didTakeAlternativeRouteAt location: CoreLocation.CLLocation?)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, didFailToTakeAlternativeRouteAt location: CoreLocation.CLLocation?)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, shouldDiscard location: CoreLocation.CLLocation) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didRerouteAlong route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?, proactive: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didFailToRerouteWith error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didRefresh routeProgress: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didArriveAt waypoint: NbmapCoreNavigation.Waypoint)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willBeginSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didBeginSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willEndSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didEndSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, shouldPreventReroutesWhenArrivingAt waypoint: NbmapCoreNavigation.Waypoint) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func navigationServiceShouldDisableBatteryMonitoring(_ service: any NbmapCoreNavigation.NavigationService) -> Swift.Bool
}
extension NbmapNavigation.NavigationViewController : NbmapNavigation.StyleManagerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func locationFor(styleManager _: NbmapNavigation.StyleManager) -> CoreLocation.CLLocation?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func styleManager(_: NbmapNavigation.StyleManager, didApply style: NbmapNavigation.Style)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func styleManagerDidRefreshAppearance(_: NbmapNavigation.StyleManager)
}
extension NbmapNavigation.NavigationViewController : NbmapNavigation.TopBannerViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency public func preview(step: NbmapCoreNavigation.RouteStep, in banner: NbmapNavigation.TopBannerViewController, remaining: [NbmapCoreNavigation.RouteStep], route: NbmapCoreNavigation.Route, animated: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func label(_ label: NbmapNavigation.InstructionLabel, willPresent instruction: NbmapCoreNavigation.VisualInstruction, as presented: Foundation.NSAttributedString) -> Foundation.NSAttributedString?
}
extension NbmapNavigation.NavigationViewController : NbmapNavigation.BottomBannerViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency public func bottomBanner(_: NbmapNavigation.BottomBannerViewController, didRemove legIndex: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func bottomBanner(_: NbmapNavigation.BottomBannerViewController, didSelect _: Swift.Int, stepIndex _: Swift.Int, cell _: NbmapNavigation.StepTableViewCell)
  @_Concurrency.MainActor @preconcurrency public func bottomBanner(_: NbmapNavigation.BottomBannerViewController, didCancleRemoveWaypoint legIndex: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func didTapCancel(_: Any)
  @_Concurrency.MainActor @preconcurrency public func didTapOverview(_: Any)
}
extension NbmapNavigation.NavigationViewController : NbmapNavigation.CarPlayConnectionObserver {
  @_Concurrency.MainActor @preconcurrency public func didConnectToCarPlay()
  @_Concurrency.MainActor @preconcurrency public func didDisconnectFromCarPlay()
}
extension NbmapNavigation.NavigationViewController : NbmapNavigation.NavigationMapViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func navigationMapView(_: NbmapNavigation.NavigationMapView, routeStyleLayerWithIdentifier identifier: Swift.String, source: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func navigationMapView(_: NbmapNavigation.NavigationMapView, routeCasingStyleLayerWithIdentifier identifier: Swift.String, source: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func navigationMapView(_: NbmapNavigation.NavigationMapView, waypointSymbolStyleLayerWithIdentifier identifier: Swift.String, waypoints: [NbmapCoreNavigation.Waypoint], source: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func navigationMapView(_: NbmapNavigation.NavigationMapView, shapeFor waypoints: [NbmapCoreNavigation.Waypoint], legIndex: Swift.Int) -> Nbmap.NGLShape?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func navigationMapView(_: NbmapNavigation.NavigationMapView, shapeFor routes: [NbmapCoreNavigation.Route]) -> Nbmap.NGLShape?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func navigationMapView(_: NbmapNavigation.NavigationMapView, didSelect route: NbmapCoreNavigation.Route)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func navigationMapView(_: NbmapNavigation.NavigationMapView, didSelect waypoint: NbmapCoreNavigation.Waypoint)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func navigationMapView(_: NbmapNavigation.NavigationMapView, simplifiedShapeFor route: NbmapCoreNavigation.Route) -> Nbmap.NGLShape?
  @_Concurrency.MainActor @preconcurrency public func navigationMapView(_: Nbmap.NGLMapView, imageFor annotation: any Nbmap.NGLAnnotation) -> Nbmap.NGLAnnotationImage?
  @_Concurrency.MainActor @preconcurrency public func navigationMapView(_: Nbmap.NGLMapView, viewFor annotation: any Nbmap.NGLAnnotation) -> Nbmap.NGLAnnotationView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func navigationMapViewUserAnchorPoint(_ mapView: NbmapNavigation.NavigationMapView) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mapView(_: Nbmap.NGLMapView, didFinishLoading style: Nbmap.NGLStyle)
}
extension NbmapNavigation.NavigationViewController : Nbmap.NGLMapViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mapView(_: Nbmap.NGLMapView, imageFor annotation: any Nbmap.NGLAnnotation) -> Nbmap.NGLAnnotationImage?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mapView(_: Nbmap.NGLMapView, viewFor annotation: any Nbmap.NGLAnnotation) -> Nbmap.NGLAnnotationView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mapView(_: Nbmap.NGLMapView, didSelect annotation: any Nbmap.NGLAnnotation)
}
extension NbmapCoreNavigation.Route {
  public func isFarawayFrom(cordinate: CoreLocation.CLLocationCoordinate2D, minDistance: CoreLocation.CLLocationDistance = 1000) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(NBStepTableViewCell) @_Concurrency.MainActor @preconcurrency open class StepTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForReuse()
  @objc deinit
}
extension NbmapNavigation.NavigationMapView {
  @_Concurrency.MainActor @preconcurrency public func updateRouteLine(routeProgress: NbmapCoreNavigation.RouteProgress, coordinate: CoreLocation.CLLocationCoordinate2D?, routes: [NbmapCoreNavigation.Route], shouldRedraw: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func updateUpcomingRoutePointIndex(routeProgress: NbmapCoreNavigation.RouteProgress, coordinate: CoreLocation.CLLocationCoordinate2D?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func travelAlongRouteLine(to coordinate: CoreLocation.CLLocationCoordinate2D?, by verhence: Swift.Bool = false)
}
public protocol InstructionsBannerViewDelegate : NbmapNavigation.VisualInstructionDelegate {
  func didTapInstructionsBanner(_ sender: NbmapNavigation.BaseInstructionsBannerView)
  func didSwipeInstructionsBanner(_ sender: NbmapNavigation.BaseInstructionsBannerView, swipeDirection direction: UIKit.UISwipeGestureRecognizer.Direction)
}
extension NbmapNavigation.InstructionsBannerViewDelegate {
  public func didTapInstructionsBanner(_: NbmapNavigation.BaseInstructionsBannerView)
  public func didSwipeInstructionsBanner(_: NbmapNavigation.BaseInstructionsBannerView, swipeDirection _: UIKit.UISwipeGestureRecognizer.Direction)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SpeedView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var signBackColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var regulatoryBorderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var speedLimit: Foundation.Measurement<Foundation.UnitSpeed>? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentSpeed: Foundation.Measurement<Foundation.UnitSpeed>? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var formatedUnit: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var signStandard: NbmapCoreNavigation.SignStandard? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isAlwaysHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var shouldShowUnknownSpeedLimit: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var shouldShowUnknownSpeed: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBStyleKitMarker) public class StyleKitMarker : ObjectiveC.NSObject {
  @objc dynamic public class func drawMarker(frame _: CoreFoundation.CGRect = CGRect(x: 57, y: 27, width: 50, height: 50), innerColor: UIKit.UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), shadowColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), pinColor: UIKit.UIColor = UIColor(red: 0.290, green: 0.565, blue: 0.886, alpha: 1.000), strokeColor: UIKit.UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000))
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.String {
  public var nonEmptyString: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class WaypointArrivedCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func reinstallConstraints()
  @_Concurrency.MainActor @preconcurrency open func updateSection(symbol: Swift.String, text: Swift.String, isArrived _: Swift.Bool = false)
  @objc deinit
}
open class NavigationOptions {
  open var styles: [NbmapNavigation.Style]?
  open var topBanner: (any UIKit.UIViewController & NbmapNavigation.NavigationComponent)?
  open var bottomBanner: (any UIKit.UIViewController & NbmapNavigation.NavigationComponent)?
  open var navigationMapView: NbmapNavigation.NavigationMapView?
  open var navigationService: (any NbmapCoreNavigation.NavigationService)?
  open var voiceController: NbmapNavigation.RouteVoiceController?
  open var vehicleNavigationIconImage: UIKit.UIImage?
  required public init()
  convenience public init(styles: [NbmapNavigation.Style]? = [DayStyle(), NightStyle()], navigationService: (any NbmapCoreNavigation.NavigationService)? = nil, voiceController: NbmapNavigation.RouteVoiceController? = nil, topBanner: (any UIKit.UIViewController & NbmapNavigation.NavigationComponent)? = nil, bottomBanner: (any UIKit.UIViewController & NbmapNavigation.NavigationComponent)? = nil, navigationMapView: NbmapNavigation.NavigationMapView? = nil, vehicleNavigationIconImage: UIKit.UIImage? = nil)
  public class func navigationOptions() -> Self
  @objc deinit
}
@objc(NBNavigationMapView) @_Concurrency.MainActor @preconcurrency open class NavigationMapView : Nbmap.NGLMapView, UIKit.UIGestureRecognizerDelegate, Nbmap.NGLMapViewDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public var defaultAltitude: Swift.Double
  @objc @_Concurrency.MainActor @preconcurrency public var zoomedOutMotorwayAltitude: Swift.Double
  @objc @_Concurrency.MainActor @preconcurrency public var longManeuverDistance: Swift.Double
  @objc @_Concurrency.MainActor @preconcurrency public var tapGestureDistanceThreshold: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency weak public var navigationMapDelegate: (any NbmapNavigation.NavigationMapViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var routeLineTracksTraversal: Swift.Bool {
    get
    set
  }
  @objc public enum DurationSymbolType : Swift.Int {
    case routeDuration = 0
    case routeDurationDiff = 1
    case noneRouteDuration = 2
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var trafficUnknownColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var trafficLowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var trafficModerateColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var trafficHeavyColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var trafficSevereColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var routeCasingColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var routeAlternateColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var routeAlternateCasingColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var maneuverArrowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var maneuverArrowStrokeColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var traversedRouteColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var alternativeTrafficUnknownColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var alternativeTrafficLowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var alternativeTrafficModerateColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var alternativeTrafficHeavyColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var alternativeTrafficSevereColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var routeRestrictedAreaColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var showsUserLocation: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency open var tracksUserCourse: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var userLocationStyle: NbmapNavigation.UserLocationStyle?
  @objc @_Concurrency.MainActor @preconcurrency public var userCourseView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var navigationCamera: NbmapNavigation.NavigationCamera! {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, styleURL: Foundation.URL?)
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, navigationCameraType: NbmapNavigation.NavigationCameraType = .mobile)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency public func updatePreferredFrameRate(for routeProgress: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func anchorPoint(forGesture gesture: UIKit.UIGestureRecognizer) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor @preconcurrency public func enableFrameByFrameCourseViewTracking(for duration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor @preconcurrency public func updateCourseTracking(location: CoreLocation.CLLocation?, camera: Nbmap.NGLMapCamera? = nil, animated: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public static let defaultPadding: UIKit.UIEdgeInsets
  @objc @_Concurrency.MainActor @preconcurrency public func showcase(_ routes: [NbmapCoreNavigation.Route], padding: UIKit.UIEdgeInsets = NavigationMapView.defaultPadding, animated: Swift.Bool = false)
  @objc @_Concurrency.MainActor @preconcurrency public func showRoutes(_ routes: [NbmapCoreNavigation.Route], legIndex: Swift.Int = 0)
  @objc @_Concurrency.MainActor @preconcurrency public func removeRoutes()
  @objc @_Concurrency.MainActor @preconcurrency public func showWaypoints(_ route: NbmapCoreNavigation.Route, legIndex: Swift.Int = 0)
  @objc @_Concurrency.MainActor @preconcurrency public func removeWaypoints()
  @objc @_Concurrency.MainActor @preconcurrency public func addArrow(route: NbmapCoreNavigation.Route, legIndex: Swift.Int, stepIndex: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func removeArrow()
  @objc @_Concurrency.MainActor @preconcurrency public func showRouteDurationSymbol(_ routes: [NbmapCoreNavigation.Route], durationSymbolType: NbmapNavigation.NavigationMapView.DurationSymbolType = .routeDuration)
  @objc @_Concurrency.MainActor @preconcurrency public func removeRouteDurationSymbol()
  @objc @_Concurrency.MainActor @preconcurrency public func appendWayNameLayer()
  @objc @_Concurrency.MainActor @preconcurrency public func localizeLabels()
  @objc @_Concurrency.MainActor @preconcurrency public func showVoiceInstructionsOnMap(route: NbmapCoreNavigation.Route)
  @objc @_Concurrency.MainActor @preconcurrency public func setOverheadCameraView(from userLocation: CoreLocation.CLLocationCoordinate2D, along coordinates: [CoreLocation.CLLocationCoordinate2D], for bounds: UIKit.UIEdgeInsets)
}
extension NbmapNavigation.NavigationMapView : NbmapNavigation.NavigationCameraDelegate {
  @_Concurrency.MainActor @preconcurrency public func navigationCameraStateDidChange(state: NbmapNavigation.NavigationCameraState)
}
@objc(NBNavigationMapViewDelegate) public protocol NavigationMapViewDelegate {
  @objc optional func navigationMapView(_ mapView: NbmapNavigation.NavigationMapView, routeStyleLayerWithIdentifier identifier: Swift.String, source: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  @objc optional func navigationMapView(_ mapView: NbmapNavigation.NavigationMapView, waypointSymbolStyleLayerWithIdentifier identifier: Swift.String, waypoints: [NbmapCoreNavigation.Waypoint], source: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  @objc optional func navigationMapView(_ mapView: NbmapNavigation.NavigationMapView, routeCasingStyleLayerWithIdentifier identifier: Swift.String, source: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  @objc optional func navigationMapView(_ mapView: NbmapNavigation.NavigationMapView, alternativeRouteStyleLayerWithIdentifier identifier: Swift.String, source: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  @objc optional func navigationMapView(_ mapView: NbmapNavigation.NavigationMapView, alternativeRouteCasingStyleLayerWithIdentifier identifier: Swift.String, source: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  @objc(navigationMapView:didSelectRoute:) optional func navigationMapView(_ mapView: NbmapNavigation.NavigationMapView, didSelect route: NbmapCoreNavigation.Route)
  @objc(navigationMapView:didSelectWaypoint:) optional func navigationMapView(_ mapView: NbmapNavigation.NavigationMapView, didSelect waypoint: NbmapCoreNavigation.Waypoint)
  @objc(navigationMapView:shapeForRoutes:) optional func navigationMapView(_ mapView: NbmapNavigation.NavigationMapView, shapeFor routes: [NbmapCoreNavigation.Route]) -> Nbmap.NGLShape?
  @objc(navigationMapView:simplifiedShapeForRoute:) optional func navigationMapView(_ mapView: NbmapNavigation.NavigationMapView, simplifiedShapeFor route: NbmapCoreNavigation.Route) -> Nbmap.NGLShape?
  @objc(navigationMapView:shapeForWaypoints:legIndex:) optional func navigationMapView(_ mapView: NbmapNavigation.NavigationMapView, shapeFor waypoints: [NbmapCoreNavigation.Waypoint], legIndex: Swift.Int) -> Nbmap.NGLShape?
  @objc(navigationMapViewUserAnchorPoint:) optional func navigationMapViewUserAnchorPoint(_ mapView: NbmapNavigation.NavigationMapView) -> CoreFoundation.CGPoint
}
@objc @_Concurrency.MainActor @preconcurrency open class CPNavigationView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var navigationMapView: NbmapNavigation.NavigationMapView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var topBannerContainerView: NbmapNavigation.BannerContainerView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, navigationMapView: NbmapNavigation.NavigationMapView? = nil)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
public protocol NavigationComponent : NbmapCoreNavigation.NavigationServiceDelegate {
  var navigationDataEventTracking: (any NbmapCoreNavigation.NavigationEventTracking)? { get set }
}
public protocol NavigationMapInteractionObserver : AnyObject {
  func navigationViewController(didCenterOn location: CoreLocation.CLLocation)
}
public protocol CarPlayConnectionObserver : AnyObject {
  func didConnectToCarPlay()
  func didDisconnectFromCarPlay()
}
public protocol NavigationStatusPresenter : AnyObject {
  func show(_: NbmapNavigation.StatusView.Status)
  func hide(_: NbmapNavigation.StatusView.Status)
}
public protocol BottomBannerViewControllerDelegate : AnyObject {
  func didTapCancel(_ sender: Any)
  func didTapOverview(_ sender: Any)
  func bottomBanner(_ banner: NbmapNavigation.BottomBannerViewController, didSelect legIndex: Swift.Int, stepIndex: Swift.Int, cell: NbmapNavigation.StepTableViewCell)
  func bottomBanner(_ banner: NbmapNavigation.BottomBannerViewController, didRemove legIndex: Swift.Int)
  func bottomBanner(_ banner: NbmapNavigation.BottomBannerViewController, didCancleRemoveWaypoint legIndex: Swift.Int)
}
@_inheritsConvenienceInitializers @objc(NBStepsBackgroundView) @_Concurrency.MainActor @preconcurrency open class StepsBackgroundView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol StepsViewControllerDelegate : AnyObject {
  func stepsViewController(_ viewController: NbmapNavigation.StepsViewController, didSelect legIndex: Swift.Int, stepIndex: Swift.Int, cell: NbmapNavigation.StepTableViewCell)
  func stepsViewController(_ viewController: NbmapNavigation.StepsViewController, didRemove legIndex: Swift.Int, cell: NbmapNavigation.LegSummaryCell)
  func stepsViewController(_ viewController: NbmapNavigation.StepsViewController, didOnTapArrived legIndex: Swift.Int, cell: NbmapNavigation.WaypointArrivedCell)
}
@_inheritsConvenienceInitializers @objc(NBStepsViewController) @_Concurrency.MainActor @preconcurrency public class StepsViewController : UIKit.UIViewController, NbmapNavigation.NavigationComponent {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any NbmapNavigation.StepsViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency weak public var navigationDataEventTracking: (any NbmapCoreNavigation.NavigationEventTracking)?
  @_Concurrency.MainActor @preconcurrency convenience public init(routeProgress: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func dropDownAnimation()
  @_Concurrency.MainActor @preconcurrency public func slideUpAnimation(completion: NbmapNavigation.CompletionHandler? = nil)
  @_Concurrency.MainActor @preconcurrency public func dismiss(completion: NbmapNavigation.CompletionHandler? = nil)
  @_Concurrency.MainActor @preconcurrency public func tableViewHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension NbmapNavigation.StepsViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith _: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension NbmapNavigation.StepsViewController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension NbmapNavigation.StepsViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in _: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@_inheritsConvenienceInitializers @objc(NBDayStyle) open class DayStyle : NbmapNavigation.Style {
  @objc required dynamic public init()
  @objc override open func apply()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBNightStyle) open class NightStyle : NbmapNavigation.DayStyle {
  @objc required dynamic public init()
  @objc override open func apply()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class GenericRouteShield : NbmapNavigation.StylableView {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @objc(NBLanesView) @_Concurrency.MainActor @preconcurrency open class LanesView : UIKit.UIView, NbmapNavigation.NavigationComponent {
  @_Concurrency.MainActor @preconcurrency public var isCurrentlyVisible: Swift.Bool
  public typealias CompletionHandler = (_ completed: Swift.Bool) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public func update(for visualInstruction: NbmapCoreNavigation.VisualInstructionBanner?, animated: Swift.Bool = true, duration: Foundation.TimeInterval = 0.5, completion: NbmapNavigation.LanesView.CompletionHandler? = nil)
  @_Concurrency.MainActor @preconcurrency public func show(animated: Swift.Bool = true, duration: Foundation.TimeInterval = 0.5, completion: NbmapNavigation.LanesView.CompletionHandler? = nil)
  @_Concurrency.MainActor @preconcurrency public func hide(animated: Swift.Bool = true, duration: Foundation.TimeInterval = 0.5, completion: NbmapNavigation.LanesView.CompletionHandler? = nil)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, didPassVisualInstructionPoint instruction: NbmapCoreNavigation.VisualInstructionBanner, routeProgress _: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency weak public var navigationDataEventTracking: (any NbmapCoreNavigation.NavigationEventTracking)?
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
@IBDesignable @objc(NBNavigationView) @_Concurrency.MainActor @preconcurrency open class NavigationView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var navigationMapView: NbmapNavigation.NavigationMapView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var floatingStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var floatingButtons: [UIKit.UIButton]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var wayNameView: NbmapNavigation.WayNameView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var speedView: NbmapNavigation.SpeedView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var topBannerContainerView: NbmapNavigation.BannerContainerView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var bottomBannerContainerView: NbmapNavigation.BannerContainerView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, navigationMapView: NbmapNavigation.NavigationMapView? = nil)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension NbmapNavigation.CPNavigationView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@_Concurrency.MainActor @preconcurrency public class CarPlayNavigationViewController : UIKit.UIViewController, Nbmap.NGLMapViewDelegate {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any NbmapNavigation.CarPlayNavigationDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var navigationMapView: NbmapNavigation.NavigationMapView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var usesNightStyleWhileInTunnel: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var carPlayManager: NbmapNavigation.CarPlayManager
  @_Concurrency.MainActor @preconcurrency public var styles: [NbmapNavigation.Style] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var styleManager: NbmapNavigation.StyleManager! {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var navigationService: (any NbmapCoreNavigation.NavigationService)! {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(for navigationService: any NbmapCoreNavigation.NavigationService, mapTemplate: CarPlay.CPMapTemplate, interfaceController: CarPlay.CPInterfaceController, manager: NbmapNavigation.CarPlayManager, styles: [NbmapNavigation.Style]? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLayoutSubviews()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewSafeAreaInsetsDidChange()
  @objc(startNavigationSessionForTrip:) @_Concurrency.MainActor @preconcurrency public func startNavigationSession(for trip: CarPlay.CPTrip)
  @objc(exitNavigationByCanceling:) @_Concurrency.MainActor @preconcurrency public func exitNavigation(byCanceling canceled: Swift.Bool = false)
  @objc @_Concurrency.MainActor @preconcurrency public func showFeedback()
  @objc @_Concurrency.MainActor @preconcurrency public var tracksUserCourse: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public func beginPanGesture()
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayNavigationViewController : NbmapNavigation.StyleManagerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func locationFor(styleManager _: NbmapNavigation.StyleManager) -> CoreLocation.CLLocation?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func styleManager(_: NbmapNavigation.StyleManager, didApply style: NbmapNavigation.Style)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func styleManagerDidRefreshAppearance(_: NbmapNavigation.StyleManager)
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayNavigationViewController : NbmapCoreNavigation.NavigationServiceDelegate {
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didArriveAt waypoint: NbmapCoreNavigation.Waypoint)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didUpdate progress: NbmapCoreNavigation.RouteProgress, with location: CoreLocation.CLLocation, rawLocation: CoreLocation.CLLocation)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didPassVisualInstructionPoint instruction: NbmapCoreNavigation.VisualInstructionBanner, routeProgress: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, willRerouteFrom _: CoreLocation.CLLocation)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didRerouteAlong route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?, proactive: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didRefresh routeProgress: NbmapCoreNavigation.RouteProgress)
}
@available(iOS 13.0, *)
@objc(NBNavigationCarPlayDelegate) public protocol CarPlayNavigationDelegate {
  @objc(carPlayNavigationViewControllerDidDismiss:byCanceling:) func carPlayNavigationViewControllerDidDismiss(_ carPlayNavigationViewController: NbmapNavigation.CarPlayNavigationViewController, byCanceling canceled: Swift.Bool)
  @objc func carPlayNavigationViewControllerDidArrive(_ carPlayNavigationViewController: NbmapNavigation.CarPlayNavigationViewController)
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayNavigationViewController : CarPlay.CPSessionConfigurationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func sessionConfiguration(_: CarPlay.CPSessionConfiguration, contentStyleChanged contentStyle: CarPlay.CPContentStyle)
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayNavigationViewController : NbmapNavigation.TopBannerViewControllerDelegate {
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayNavigationViewController : NbmapNavigation.NavigationMapViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mapView(_: Nbmap.NGLMapView, didFinishLoading style: Nbmap.NGLStyle)
}
@objc @_inheritsConvenienceInitializers public class SpeedLimitStyleKit : ObjectiveC.NSObject {
  @objc dynamic public class func drawMUTCD(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 56, height: 66), resizing: NbmapNavigation.SpeedLimitStyleKit.ResizingBehavior = .aspectFit, signBackColor: UIKit.UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), strokeColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), limit: Swift.String = "50", legend: Swift.String = "MAX")
  @objc dynamic public class func drawVienna(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 70, height: 70), resizing: NbmapNavigation.SpeedLimitStyleKit.ResizingBehavior = .aspectFit, signBackColor: UIKit.UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), strokeColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), regulatoryColor: UIKit.UIColor = UIColor(red: 0.800, green: 0.000, blue: 0.000, alpha: 1.000), limit: Swift.String = "50")
  @objc dynamic public class func drawSpeedOnly(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 70, height: 70), resizing: NbmapNavigation.SpeedLimitStyleKit.ResizingBehavior = .aspectFit, signBackColor: UIKit.UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), strokeColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), speed: Swift.String = "50", measurement: Swift.String = "km/h")
  @objc(SpeedLimitStyleKitResizingBehavior) public enum ResizingBehavior : Swift.Int {
    case aspectFit
    case aspectFill
    case stretch
    case center
    public func apply(rect: CoreFoundation.CGRect, target: CoreFoundation.CGRect) -> CoreFoundation.CGRect
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct OverviewCameraOptions : Swift.Equatable {
  public var maximumZoomLevel: Swift.Double {
    get
    set
  }
  public var centerUpdatesAllowed: Swift.Bool
  public var zoomUpdatesAllowed: Swift.Bool
  public var bearingUpdatesAllowed: Swift.Bool
  public var pitchUpdatesAllowed: Swift.Bool
  public var paddingUpdatesAllowed: Swift.Bool
  public init()
  public static func == (lhs: NbmapNavigation.OverviewCameraOptions, rhs: NbmapNavigation.OverviewCameraOptions) -> Swift.Bool
}
public enum NavigationImages {
}
@_inheritsConvenienceInitializers @objc(NBStepInstructionsView) @_Concurrency.MainActor @preconcurrency open class StepInstructionsView : NbmapNavigation.BaseInstructionsBannerView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency public class JunctionView : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public func show(animated: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func update(for _: NbmapCoreNavigation.VisualInstructionBanner?, service _: any NbmapCoreNavigation.NavigationService)
  @_Concurrency.MainActor @preconcurrency public func hide(delay: Foundation.TimeInterval = 0, animated: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBEndOfRouteContentView) @_Concurrency.MainActor @preconcurrency open class EndOfRouteContentView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBEndOfRouteTitleLabel) @_Concurrency.MainActor @preconcurrency open class EndOfRouteTitleLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBEndOfRouteStaticLabel) @_Concurrency.MainActor @preconcurrency open class EndOfRouteStaticLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBEndOfRouteCommentView) @_Concurrency.MainActor @preconcurrency open class EndOfRouteCommentView : NbmapNavigation.StylableTextView {
  @available(iOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBEndOfRouteButton) @_Concurrency.MainActor @preconcurrency open class EndOfRouteButton : NbmapNavigation.StylableButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NbmapNavigation.NavMapCameraOption {
  public static let followingMobileCamera: Swift.String
  public static let overviewMobileCamera: Swift.String
  public static let followingCarPlayCamera: Swift.String
  public static let overviewCarPlayCamera: Swift.String
}
extension Foundation.NSNotification.Name {
  public static let navigationCameraStateDidChange: Foundation.Notification.Name
  public static let navigationCameraViewportDidChange: Foundation.Notification.Name
}
extension NbmapNavigation.NavigationCamera {
  public struct NotificationUserInfoKey : Swift.Hashable, Swift.Equatable, Swift.RawRepresentable {
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String
    public init(rawValue: Swift.String)
    public static let state: NbmapNavigation.NavigationCamera.NotificationUserInfoKey
    public static let cameraOptions: NbmapNavigation.NavigationCamera.NotificationUserInfoKey
  }
}
extension Nbmap.NGLStyle {
  @objc dynamic public class var navigationGuidanceDayStyleURL: Foundation.URL {
    @objc get
  }
  @objc dynamic public class var navigationGuidanceNightStyleURL: Foundation.URL {
    @objc get
  }
  @objc dynamic public class var navigationPreviewDayStyleURL: Foundation.URL {
    @objc get
  }
  @objc dynamic public class var navigationPreviewNightStyleURL: Foundation.URL {
    @objc get
  }
}
public protocol BasicCameraAnimator {
  func startAnimation(option: NbmapNavigation.NavMapCameraOption)
  func stopAnimation()
  func isRunning() -> Swift.Bool
}
extension CoreFoundation.CGPoint {
  public func distance(to targetPoint: CoreFoundation.CGPoint) -> CoreFoundation.CGFloat
}
public struct NavigationViewportDataSourceOptions : Swift.Equatable {
  public var followingCameraOptions: NbmapNavigation.FollowingCameraOptions
  public var overviewCameraOptions: NbmapNavigation.OverviewCameraOptions
  public init()
  public init(_ followingCameraOptions: NbmapNavigation.FollowingCameraOptions, overviewCameraOptions: NbmapNavigation.OverviewCameraOptions)
  public static func == (lhs: NbmapNavigation.NavigationViewportDataSourceOptions, rhs: NbmapNavigation.NavigationViewportDataSourceOptions) -> Swift.Bool
}
public enum CarPlayActivity : Swift.Int {
  case browsing
  case previewing
  case navigating
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class CarPlayManager : ObjectiveC.NSObject {
  public var interfaceController: CarPlay.CPInterfaceController? {
    get
  }
  public var carWindow: UIKit.UIWindow? {
    get
  }
  weak public var delegate: (any NbmapNavigation.CarPlayManagerDelegate)?
  @objc public var simulatesLocations: Swift.Bool
  public var routeOptions: NbmapCoreNavigation.NavigationRouteOptions?
  public var simulatedSpeedMultiplier: Swift.Double
  public var mainMapTemplate: CarPlay.CPMapTemplate? {
    get
  }
  weak public var currentNavigator: NbmapNavigation.CarPlayNavigationViewController? {
    get
  }
  public static let CarPlayWaypointKey: Swift.String
  public var recentSearchItems: [CarPlay.CPListItem]?
  public static var isConnectedToCarPlay: Swift.Bool
  public var currentActivity: NbmapNavigation.CarPlayActivity? {
    get
  }
  public var dataTracking: NbmapCoreNavigation.DataTracking
  public var styles: [NbmapNavigation.Style] {
    get
    set
  }
  public var navigationMapView: NbmapNavigation.NavigationMapView? {
    get
  }
  public var customRoutingProvider: (any NbmapCoreNavigation.RoutingProvider)?
  public var routingProvider: any NbmapCoreNavigation.RoutingProvider {
    get
    set
  }
  public var exitButton: CarPlay.CPBarButton {
    get
    set
  }
  public var muteButton: CarPlay.CPBarButton {
    get
    set
  }
  public var userTrackingButton: CarPlay.CPMapButton {
    get
    set
  }
  convenience public init(styles: [NbmapNavigation.Style]? = nil, customRoutingProvider: (any NbmapCoreNavigation.RoutingProvider)? = nil)
  @objc deinit
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayManager : CarPlay.CPTemplateApplicationSceneDelegate {
  @objc dynamic public func templateApplicationScene(_: CarPlay.CPTemplateApplicationScene, didConnect interfaceController: CarPlay.CPInterfaceController, to window: CarPlay.CPWindow)
  @objc dynamic public func templateApplicationScene(_: CarPlay.CPTemplateApplicationScene, didDisconnect interfaceController: CarPlay.CPInterfaceController, from window: CarPlay.CPWindow)
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayManager : CarPlay.CPApplicationDelegate {
  @objc dynamic public func application(_: UIKit.UIApplication, didConnectCarInterfaceController interfaceController: CarPlay.CPInterfaceController, to window: CarPlay.CPWindow)
  @objc dynamic public func application(_: UIKit.UIApplication, didDisconnectCarInterfaceController interfaceController: CarPlay.CPInterfaceController, from window: CarPlay.CPWindow)
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayManager : CarPlay.CPInterfaceControllerDelegate {
  @objc dynamic public func templateWillAppear(_ template: CarPlay.CPTemplate, animated: Swift.Bool)
  @objc dynamic public func templateDidAppear(_ template: CarPlay.CPTemplate, animated: Swift.Bool)
  @objc dynamic public func templateWillDisappear(_ template: CarPlay.CPTemplate, animated: Swift.Bool)
  @objc dynamic public func templateDidDisappear(_ template: CarPlay.CPTemplate, animated: Swift.Bool)
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayManager : CarPlay.CPListTemplateDelegate {
  @objc dynamic public func listTemplate(_: CarPlay.CPListTemplate, didSelect item: CarPlay.CPListItem, completionHandler: @escaping () -> Swift.Void)
  public func calculateRouteAndStart(from fromWaypoint: NbmapCoreNavigation.Waypoint? = nil, to toWaypoint: NbmapCoreNavigation.Waypoint, completionHandler: @escaping () -> Swift.Void)
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayManager : CarPlay.CPMapTemplateDelegate {
  @objc dynamic public func mapTemplate(_: CarPlay.CPMapTemplate, startedTrip trip: CarPlay.CPTrip, using routeChoice: CarPlay.CPRouteChoice)
  @objc dynamic public func mapTemplate(_ mapTemplate: CarPlay.CPMapTemplate, selectedPreviewFor trip: CarPlay.CPTrip, using routeChoice: CarPlay.CPRouteChoice)
  public func getFinalRoutes(trip: CarPlay.CPTrip, routeChoice: CarPlay.CPRouteChoice) -> [NbmapCoreNavigation.Route]
  @objc dynamic public func mapTemplateDidCancelNavigation(_: CarPlay.CPMapTemplate)
  @objc dynamic public func mapTemplateDidBeginPanGesture(_ mapTemplate: CarPlay.CPMapTemplate)
  @objc dynamic public func mapTemplate(_ mapTemplate: CarPlay.CPMapTemplate, didEndPanGestureWithVelocity velocity: CoreFoundation.CGPoint)
  @objc dynamic public func mapTemplateWillDismissPanningInterface(_: CarPlay.CPMapTemplate)
  @objc dynamic public func mapTemplate(_ mapTemplate: CarPlay.CPMapTemplate, didUpdatePanGestureWithTranslation translation: CoreFoundation.CGPoint, velocity _: CoreFoundation.CGPoint)
  @objc dynamic public func mapTemplate(_: CarPlay.CPMapTemplate, panWith direction: CarPlay.CPMapTemplate.PanDirection)
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayManager : NbmapNavigation.CarPlayNavigationDelegate {
  @objc dynamic public func carPlayNavigationViewControllerDidArrive(_: NbmapNavigation.CarPlayNavigationViewController)
  @objc dynamic public func carPlayNavigationViewControllerDidDismiss(_: NbmapNavigation.CarPlayNavigationViewController, byCanceling _: Swift.Bool)
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayManager {
  public static let currentActivityKey: Swift.String
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayManager : NbmapNavigation.CarplayOperationsDelegate {
  public func onRouteFeatched(origin: NbmapCoreNavigation.Waypoint, destination: NbmapCoreNavigation.Waypoint, routes: [NbmapCoreNavigation.Route])
  public func onRouteCancled()
  public func onNavigationStart(routes: [NbmapCoreNavigation.Route])
  public func onNavigationTerminated()
}
public struct NavigationGeocodedPlacemark : Swift.Equatable, Swift.Codable {
  public var title: Swift.String
  public var subtitle: Swift.String?
  public var location: CoreLocation.CLLocation?
  public var routableLocations: [CoreLocation.CLLocation]?
  public init(title: Swift.String, subtitle: Swift.String?, location: CoreLocation.CLLocation?, routableLocations: [CoreLocation.CLLocation]?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NbmapNavigation.NavigationGeocodedPlacemark, rhs: NbmapNavigation.NavigationGeocodedPlacemark) -> Swift.Bool
  @available(iOS 13.0, *)
  public func listItem() -> CarPlay.CPListItem
}
extension CoreLocation.CLLocation : Swift.Encodable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case latitude
    case longitude
    case altitude
    case horizontalAccuracy
    case verticalAccuracy
    case speed
    case course
    case timestamp
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    @available(iOS 2.0, *)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @IBDesignable @objc(NBManeuverView) @_Concurrency.MainActor @preconcurrency open class ManeuverView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var primaryColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var secondaryColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isStart: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isEnd: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var visualInstruction: NbmapCoreNavigation.VisualInstruction? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var drivingSide: NbmapCoreNavigation.DrivingSide {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol CourseUpdatable : UIKit.UIView {
  func update(location: CoreLocation.CLLocation, pitch: CoreFoundation.CGFloat, direction: CoreLocation.CLLocationDegrees, animated: Swift.Bool, tracksUserCourse: Swift.Bool)
  func updateWayNameLabel(wayNameFeatures: [any Nbmap.NGLFeature], cameraState: NbmapNavigation.NavigationCameraState)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class UserPuckCourseView : UIKit.UIView, NbmapNavigation.CourseUpdatable {
  @_Concurrency.MainActor @preconcurrency public func update(location: CoreLocation.CLLocation, pitch: CoreFoundation.CGFloat, direction: CoreLocation.CLLocationDegrees, animated: Swift.Bool, tracksUserCourse: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public var minimizesInOverview: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var puckImage: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public func updateWayNameLabel(wayNameFeatures: [any Nbmap.NGLFeature], cameraState: NbmapNavigation.NavigationCameraState)
  @_Concurrency.MainActor @preconcurrency public var puckView: UIKit.UIImageView! {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency required public init?(puckImage: UIKit.UIImage, frame: CoreFoundation.CGRect)
  @objc deinit
}
extension NbmapNavigation.NavigationView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class InstructionsBannerView : NbmapNavigation.BaseInstructionsBannerView, NbmapNavigation.NavigationComponent {
  @_Concurrency.MainActor @preconcurrency weak public var navigationDataEventTracking: (any NbmapCoreNavigation.NavigationEventTracking)?
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, didPassVisualInstructionPoint instruction: NbmapCoreNavigation.VisualInstructionBanner, routeProgress _: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class BaseInstructionsBannerView : UIKit.UIControl {
  @_Concurrency.MainActor @preconcurrency weak public var maneuverView: NbmapNavigation.ManeuverView!
  @_Concurrency.MainActor @preconcurrency weak public var primaryLabel: NbmapNavigation.PrimaryLabel!
  @_Concurrency.MainActor @preconcurrency weak public var secondaryLabel: NbmapNavigation.SecondaryLabel!
  @_Concurrency.MainActor @preconcurrency weak public var distanceLabel: NbmapNavigation.DistanceLabel!
  @_Concurrency.MainActor @preconcurrency weak public var dividerView: UIKit.UIView!
  @_Concurrency.MainActor @preconcurrency weak public var stepListIndicatorView: NbmapNavigation.StepListIndicatorView!
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var swipeable: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var isTopBannerView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any NbmapNavigation.InstructionsBannerViewDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var distance: CoreLocation.CLLocationDistance? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func update(for instruction: NbmapCoreNavigation.VisualInstructionBanner?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency public func updateDistance(for currentStepProgress: NbmapCoreNavigation.RouteStepProgress)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class StatusView : UIKit.UIControl {
  public struct Status {
    public var identifier: Swift.String
    public let title: Swift.String
    public var spinner: Swift.Bool
    public let duration: Foundation.TimeInterval
    public var animated: Swift.Bool
    public var interactive: Swift.Bool
    public var priority: NbmapNavigation.StatusView.Priority
  }
  public typealias Priority = Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func show(status: NbmapNavigation.StatusView.Status)
  @_Concurrency.MainActor @preconcurrency public func hide(with status: NbmapNavigation.StatusView.Status? = nil, delay: Foundation.TimeInterval = 0, animated: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func cancelPendingHideOperations()
  @objc deinit
}
@objc(NBBannerContainerView) @_Concurrency.MainActor @preconcurrency open class BannerContainerView : UIKit.UIView {
  public enum `Type` {
    case top
    case bottom
    public static func == (a: NbmapNavigation.BannerContainerView.`Type`, b: NbmapNavigation.BannerContainerView.`Type`) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum State {
    case expanded
    case collapsed
    case hiden
    public static func == (a: NbmapNavigation.BannerContainerView.State, b: NbmapNavigation.BannerContainerView.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func safeAreaInsetsDidChange()
  @_Concurrency.MainActor @preconcurrency public var state: NbmapNavigation.BannerContainerView.State {
    get
  }
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any NbmapNavigation.BannerContainerViewDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(_ type: NbmapNavigation.BannerContainerView.`Type`, frame: CoreFoundation.CGRect = .zero)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  public typealias CompletionHandler = (_ completed: Swift.Bool) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public func show(animated: Swift.Bool = true, duration: Foundation.TimeInterval = 0.2, animations: (() -> Swift.Void)? = nil, completion: NbmapNavigation.BannerContainerView.CompletionHandler? = nil)
  @_Concurrency.MainActor @preconcurrency public func hide(animated: Swift.Bool = true, duration: Foundation.TimeInterval = 0.2, animations: (() -> Swift.Void)? = nil, completion: NbmapNavigation.BannerContainerView.CompletionHandler? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class BottomBannerViewController : UIKit.UIViewController, NbmapNavigation.NavigationComponent {
  @_Concurrency.MainActor @preconcurrency weak public var navigationDataEventTracking: (any NbmapCoreNavigation.NavigationEventTracking)?
  @_Concurrency.MainActor @preconcurrency open var bottomPaddingView: NbmapNavigation.BottomPaddingView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var bottomBannerView: NbmapNavigation.BottomBannerView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var timeRemainingLabel: NbmapNavigation.TimeRemainingLabel!
  @_Concurrency.MainActor @preconcurrency open var distanceRemainingLabel: NbmapNavigation.DistanceRemainingLabel!
  @_Concurrency.MainActor @preconcurrency open var arrivalTimeLabel: NbmapNavigation.ArrivalTimeLabel!
  @_Concurrency.MainActor @preconcurrency open var cancelButton: NbmapNavigation.CancelButton!
  @_Concurrency.MainActor @preconcurrency open var overviewButton: NbmapNavigation.OverviewButton!
  @_Concurrency.MainActor @preconcurrency open var dotDividerView: NbmapNavigation.SeparatorView!
  @_Concurrency.MainActor @preconcurrency open var stepsContainer: NbmapNavigation.StepsInstructionView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency weak open var delegate: (any NbmapNavigation.BottomBannerViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didRerouteAlong _: NbmapCoreNavigation.Route, at _: CoreLocation.CLLocation?, proactive _: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didFailToRerouteWith _: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, didRefresh routeProgress: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, didUpdate progress: NbmapCoreNavigation.RouteProgress, with _: CoreLocation.CLLocation, rawLocation _: CoreLocation.CLLocation)
}
extension NbmapNavigation.BottomBannerViewController : NbmapNavigation.StepsViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency public func stepsViewController(_ viewController: NbmapNavigation.StepsViewController, didOnTapArrived legIndex: Swift.Int, cell _: NbmapNavigation.WaypointArrivedCell)
  @_Concurrency.MainActor @preconcurrency public func stepsViewController(_: NbmapNavigation.StepsViewController, didRemove legIndex: Swift.Int, cell _: NbmapNavigation.LegSummaryCell)
  @_Concurrency.MainActor @preconcurrency public func stepsViewController(_: NbmapNavigation.StepsViewController, didSelect legIndex: Swift.Int, stepIndex: Swift.Int, cell: NbmapNavigation.StepTableViewCell)
}
extension NbmapNavigation.BottomBannerViewController : NbmapNavigation.ArrivedConfirmViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func arrivedConfirmViewControllerDidOpen(_: NbmapNavigation.ArrivedConfirmViewController)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func arrivedConfirmViewControllerDidConfirm(_: NbmapNavigation.ArrivedConfirmViewController, legIndex: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func arrivedConfirmViewControllerDidCancel(_: NbmapNavigation.ArrivedConfirmViewController, legIndex: Swift.Int)
}
extension NbmapCoreNavigation.VisualInstruction {
  public func maneuverImageSet(side: NbmapCoreNavigation.DrivingSide) -> CarPlay.CPImageSet?
  public func shouldFlipImage(side: NbmapCoreNavigation.DrivingSide) -> Swift.Bool
  public func carPlayManeuverLabelAttributedText<T>(bounds: @escaping () -> CoreFoundation.CGRect, shieldHeight: CoreFoundation.CGFloat, window: UIKit.UIWindow?, traitCollection: UIKit.UITraitCollection? = nil, instructionLabelType _: T.Type? = nil) -> Foundation.NSAttributedString? where T : NbmapNavigation.InstructionLabel
  public func lanesImageSet(side: NbmapCoreNavigation.DrivingSide, direction: NbmapCoreNavigation.ManeuverDirection?, scale: CoreFoundation.CGFloat) -> CarPlay.CPImageSet?
}
public enum NavigationCameraType {
  case carPlay
  case mobile
  public static func == (a: NbmapNavigation.NavigationCameraType, b: NbmapNavigation.NavigationCameraType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class LanesStyleKit : ObjectiveC.NSObject {
  @objc dynamic public class func drawLaneSharpTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawLaneUturn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSlightTurnUsingSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneTurnUsingTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightUsingStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawLaneUturnUsingUturn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSharpTurnUsingSharpTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSlightTurnOrSharpTurnUsingSharpTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneTurnOrSharpTurnUsingTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSlightTurnOrUturnUsingUturn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSlightTurnOrTurnUsingSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrUturnUsingUturn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneTurnOrUturnUsingTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneTurnOrUturnUsingUturn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneTurnOrSharpTurnUsingSharpTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrSharpTurnUsingSharpTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeTurnOrTurnUsingTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSlightTurnOrSharpTurnUsingSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrUturnUsingStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrSlightTurnUsingSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeSlightTurnOrSlightTurnUsingSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrTurnUsingStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSlightTurnOrUturnUsingSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrSlightTurnUsingStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrSharpTurnUsingStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrTurnUsingTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSlightTurnOrTurnUsingTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeTurnOrSlightTurnUsingSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeSlightTurnOrTurnUsingTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrUturn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrSharpTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSlightTurnOrTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSlightTurnOrSharpTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneSlightTurnOrUturn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneTurnOrSharpTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneTurnOrUturn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeTurnOrSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeTurnOrTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeSlightTurnOrSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeSlightTurnOrTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeTurnOrStraightOrTurnUsingTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeTurnOrStraightOrTurnUsingStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrTurnOrUturnUsingStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrTurnOrUturnUsingTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrTurnOrUturnUsingUturn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrSlightTurnOrTurnUsingStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrSlightTurnOrTurnUsingSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrSlightTurnOrTurnUsingTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeTurnOrStraightOrSlightTurnUsingStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeTurnOrStraightOrSlightTurnUsingSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeSlightTurnOrStraightOrTurnUsingTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeSlightTurnOrStraightOrTurnUsingStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeSlightTurnOrStraightOrSlightTurnUsingStraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeSlightTurnOrStraightOrSlightTurnUsingSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeSlightTurnOrStraightOrSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeTurnOrStraightOrSlightTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeTurnOrStraightOrTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneOppositeSlightTurnOrStraightOrTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrTurnOrUturn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc dynamic public class func drawLaneStraightOrSlightTurnOrTurn(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: NbmapNavigation.LanesStyleKit.ResizingBehavior = .aspectFit, secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), flipHorizontally: Swift.Bool = false)
  @objc(LanesStyleKitResizingBehavior) public enum ResizingBehavior : Swift.Int {
    case aspectFit
    case aspectFill
    case stretch
    case center
    public func apply(rect: CoreFoundation.CGRect, target: CoreFoundation.CGRect) -> CoreFoundation.CGRect
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NbmapVoiceTextConverter {
  public static func convertorText(text: Swift.String) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @objc(NBDashedLineView) @_Concurrency.MainActor @preconcurrency public class DashedLineView : NbmapNavigation.LineView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var dashedLength: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var dashedGap: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct FollowingCameraOptions : Swift.Equatable {
  public var defaultPitch: Swift.Double {
    get
    set
  }
  public var defaultDistence: Swift.Double {
    get
    set
  }
  public var defaultFollowingCameraDistence: Swift.Double {
    get
    set
  }
  public var zoomRange: Swift.ClosedRange<Swift.Double> {
    get
    set
  }
  public var carPlayZoomRange: Swift.ClosedRange<Swift.Double> {
    get
    set
  }
  public var centerUpdatesAllowed: Swift.Bool
  public var zoomUpdatesAllowed: Swift.Bool
  public var bearingUpdatesAllowed: Swift.Bool
  public var pitchUpdatesAllowed: Swift.Bool
  public var paddingUpdatesAllowed: Swift.Bool
  public var distanceUpdateAllowed: Swift.Bool
  public var intersectionDensity: NbmapNavigation.IntersectionDensity
  public var bearingSmoothing: NbmapNavigation.BearingSmoothing
  public var geometryFramingAfterManeuver: NbmapNavigation.GeometryFramingAfterManeuver
  public var pitchNearManeuver: NbmapNavigation.PitchNearManeuver
  public var defaultPitchСoefficientForCarplay: Swift.Double
  public init()
  public static func == (lhs: NbmapNavigation.FollowingCameraOptions, rhs: NbmapNavigation.FollowingCameraOptions) -> Swift.Bool
}
public struct IntersectionDensity : Swift.Equatable {
  public var enabled: Swift.Bool
  public var averageDistanceMultiplier: Swift.Double
  public var minimumDistanceBetweenIntersections: Swift.Double
  public init()
  public static func == (lhs: NbmapNavigation.IntersectionDensity, rhs: NbmapNavigation.IntersectionDensity) -> Swift.Bool
}
public struct BearingSmoothing : Swift.Equatable {
  public var enabled: Swift.Bool
  public var maximumBearingSmoothingAngle: Swift.Double
  public init()
  public static func == (lhs: NbmapNavigation.BearingSmoothing, rhs: NbmapNavigation.BearingSmoothing) -> Swift.Bool
}
public struct GeometryFramingAfterManeuver : Swift.Equatable {
  public var enabled: Swift.Bool
  public var distanceToCoalesceCompoundManeuvers: Swift.Double
  public var distanceToFrameAfterManeuver: Swift.Double
  public init()
  public static func == (lhs: NbmapNavigation.GeometryFramingAfterManeuver, rhs: NbmapNavigation.GeometryFramingAfterManeuver) -> Swift.Bool
}
public struct PitchNearManeuver : Swift.Equatable {
  public var enabled: Swift.Bool
  public var triggerDistanceToManeuver: Swift.Double
  public init()
  public static func == (lhs: NbmapNavigation.PitchNearManeuver, rhs: NbmapNavigation.PitchNearManeuver) -> Swift.Bool
}
extension UIKit.UIImage {
  public func roundedWithBorder(width: CoreFoundation.CGFloat, color: UIKit.UIColor) -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class LaneView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var primaryColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var secondaryColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var primaryColorHighlighted: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var secondaryColorHighlighted: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var showHighlightedColors: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency convenience public init(indications: NbmapCoreNavigation.LaneIndication, isUsable: Swift.Bool, direction: NbmapCoreNavigation.ManeuverDirection?, showHighlightedColors: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc public protocol ArrivedConfirmViewControllerDelegate {
  @objc func arrivedConfirmViewControllerDidOpen(_ arrivedConfirmViewController: NbmapNavigation.ArrivedConfirmViewController)
  @objc func arrivedConfirmViewControllerDidConfirm(_ arrivedConfirmViewController: NbmapNavigation.ArrivedConfirmViewController, legIndex: Swift.Int)
  @objc func arrivedConfirmViewControllerDidCancel(_ arrivedConfirmViewController: NbmapNavigation.ArrivedConfirmViewController, legIndex: Swift.Int)
}
@objc(NBArrivedConfirmViewController) @_Concurrency.MainActor @preconcurrency public class ArrivedConfirmViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var sections: [NbmapNavigation.FeedbackItem]
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any NbmapNavigation.ArrivedConfirmViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency public var dataTracking: NbmapCoreNavigation.DataTracking?
  @_Concurrency.MainActor @preconcurrency public init(legIndex: Swift.Int, dataTracking: NbmapCoreNavigation.DataTracking?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class WayPointSymbol : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, labelText: Swift.String)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func captureScreenshot() -> UIKit.UIImage?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AnnouncementConvertor {
  public static let abbreviationDictionary: [Swift.String : Swift.String]
  public static func replaceAbbreviations(_ string: Swift.String, abbreviations: [Swift.String : Swift.String]? = nil) -> Swift.String
  public static func findAllCapsAbbreviations(_ string: Swift.String) -> [Swift.String]
  public static func splitUppercaseWithSeparator(_ string: Swift.String, separator: Swift.String) -> Swift.String
  public static func convertText(_ text: Swift.String) -> Swift.String
  public static func convertAttributedString(_ attributedString: Foundation.NSAttributedString) -> Foundation.NSAttributedString
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class SystemSpeechSynthesizer : ObjectiveC.NSObject, NbmapNavigation.SpeechSynthesizing {
  weak public var delegate: (any NbmapNavigation.SpeechSynthesizingDelegate)?
  public var muted: Swift.Bool {
    get
    set
  }
  public var volume: Swift.Float {
    get
    set
  }
  public var locale: Foundation.Locale?
  public var managesAudioSession: Swift.Bool
  public var isSpeaking: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  open func prepareIncomingSpokenInstructions(_: [NbmapCoreNavigation.SpokenInstruction], locale _: Foundation.Locale?)
  open func speak(_ instruction: NbmapCoreNavigation.SpokenInstruction, during legProgress: NbmapCoreNavigation.RouteLegProgress, locale: Foundation.Locale? = nil)
  open func stopSpeaking()
  open func interruptSpeaking()
}
extension NbmapNavigation.SystemSpeechSynthesizer : AVFAudio.AVSpeechSynthesizerDelegate {
  @objc dynamic public func speechSynthesizer(_: AVFAudio.AVSpeechSynthesizer, didStart _: AVFAudio.AVSpeechUtterance)
  @objc dynamic public func speechSynthesizer(_: AVFAudio.AVSpeechSynthesizer, didContinue _: AVFAudio.AVSpeechUtterance)
  @objc dynamic public func speechSynthesizer(_: AVFAudio.AVSpeechSynthesizer, didFinish _: AVFAudio.AVSpeechUtterance)
  @objc dynamic public func speechSynthesizer(_: AVFAudio.AVSpeechSynthesizer, didPause _: AVFAudio.AVSpeechUtterance)
  @objc dynamic public func speechSynthesizer(_: AVFAudio.AVSpeechSynthesizer, didCancel _: AVFAudio.AVSpeechUtterance)
}
public enum NavigationCameraState {
  case idle
  case transitionToFollowing
  case following
  case transitionToOverview
  case overview
  public static func == (a: NbmapNavigation.NavigationCameraState, b: NbmapNavigation.NavigationCameraState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Nbmap.NGLAccountManager {
  @objc dynamic public class var hasChinaBaseURL: Swift.Bool {
    @objc get
  }
}
extension AVFAudio.AVAudioSession {
  public func tryDuckAudio() -> (any Swift.Error)?
  public func tryUnduckAudio() -> (any Swift.Error)?
}
public protocol NavigationCameraDelegate : AnyObject {
  func navigationCameraStateDidChange(state: NbmapNavigation.NavigationCameraState)
}
@objc public class NavigationCamera : ObjectiveC.NSObject, NbmapNavigation.ViewportDataSourceDelegate {
  weak public var delegate: (any NbmapNavigation.NavigationCameraDelegate)?
  required public init(_ mapView: NbmapNavigation.NavigationMapView, navigationCameraType: NbmapNavigation.NavigationCameraType = .mobile)
  public func viewportDataSource(_: any NbmapNavigation.ViewportDataSource, didUpdate cameraOptions: [Swift.String : NbmapNavigation.NavMapCameraOption])
  public func viewportDataSourceRetriveMapview(_: any NbmapNavigation.ViewportDataSource) -> NbmapNavigation.NavigationMapView?
  public var viewportDataSource: (any NbmapNavigation.ViewportDataSource)? {
    get
    set
  }
  public var state: NbmapNavigation.NavigationCameraState {
    get
  }
  public var cameraStateTransition: (any NbmapNavigation.CameraStateTransition)?
  public func follow(_ completion: (() -> Swift.Void)? = nil)
  public func moveToOverview(_ completion: (() -> Swift.Void)? = nil)
  @objc public func stop()
  @objc deinit
}
public protocol NavigationViewControllerDelegate : NbmapNavigation.VisualInstructionDelegate {
  func navigationViewControllerDidDismiss(_ navigationViewController: NbmapNavigation.NavigationViewController, byCanceling canceled: Swift.Bool)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didArriveAt waypoint: NbmapCoreNavigation.Waypoint)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, arrivalBottomSheet waypoint: NbmapCoreNavigation.Waypoint) -> UIKit.UIViewController?
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didUpdate progress: NbmapCoreNavigation.RouteProgress, with location: CoreLocation.CLLocation, rawLocation: CoreLocation.CLLocation)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didRefresh routeProgress: NbmapCoreNavigation.RouteProgress)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, willRerouteFrom location: CoreLocation.CLLocation)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didRerouteAlong route: NbmapCoreNavigation.Route)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didFailToRerouteWith error: any Swift.Error)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, routeStyleLayerWithIdentifier identifier: Swift.String, source: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, routeCasingStyleLayerWithIdentifier identifier: Swift.String, source: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, shapeFor routes: [NbmapCoreNavigation.Route]) -> Nbmap.NGLShape?
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, simplifiedShapeFor route: NbmapCoreNavigation.Route) -> Nbmap.NGLShape?
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, waypointSymbolStyleLayerWithIdentifier identifier: Swift.String, waypoints: [NbmapCoreNavigation.Waypoint], reachedWaypoints: [NbmapCoreNavigation.Waypoint]?, source: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, shapeFor waypoints: [NbmapCoreNavigation.Waypoint], reachedWaypoints: [NbmapCoreNavigation.Waypoint]?, legIndex: Swift.Int) -> Nbmap.NGLShape?
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didSelect route: NbmapCoreNavigation.Route)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didSelect waypoint: NbmapCoreNavigation.Waypoint)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, imageFor annotation: any Nbmap.NGLAnnotation) -> Nbmap.NGLAnnotationImage?
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, viewFor annotation: any Nbmap.NGLAnnotation) -> Nbmap.NGLAnnotationView?
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, mapViewUserAnchorPoint mapView: NbmapNavigation.NavigationMapView) -> CoreFoundation.CGPoint
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, shouldDiscard location: CoreLocation.CLLocation) -> Swift.Bool
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, roadNameAt location: CoreLocation.CLLocation) -> Swift.String?
  func navigationMapViewUserAnchorPoint(_ navigationViewController: NbmapNavigation.NavigationViewController) -> CoreFoundation.CGPoint
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, willTakeAlternativeRoute route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didTakeAlternativeRouteAt location: CoreLocation.CLLocation?)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didFailToTakeAlternativeRouteAt location: CoreLocation.CLLocation?)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, shouldPreventReroutesWhenArrivingAt waypoint: NbmapCoreNavigation.Waypoint) -> Swift.Bool
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didSelect annotation: any Nbmap.NGLAnnotation)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didRemove legIdex: Swift.Int)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didCancleRemove legIdex: Swift.Int)
  func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didFinishLoading style: Nbmap.NGLStyle)
}
extension NbmapNavigation.NavigationViewControllerDelegate {
  public func navigationViewController(_: NbmapNavigation.NavigationViewController, routeStyleLayerWithIdentifier _: Swift.String, source _: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  public func navigationViewController(_: NbmapNavigation.NavigationViewController, routeCasingStyleLayerWithIdentifier _: Swift.String, source _: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  public func navigationViewController(_: NbmapNavigation.NavigationViewController, simplifiedShapeFor _: NbmapCoreNavigation.Route) -> Nbmap.NGLShape?
}
extension NbmapNavigation.NavigationViewControllerDelegate {
  public func navigationViewController(_: NbmapNavigation.NavigationViewController, waypointSymbolStyleLayerWithIdentifier _: Swift.String, waypoints _: [NbmapCoreNavigation.Waypoint], reachedWaypoints _: [NbmapCoreNavigation.Waypoint]?, source _: Nbmap.NGLSource) -> Nbmap.NGLStyleLayer?
  public func navigationViewController(_: NbmapNavigation.NavigationViewController, shapeFor _: [NbmapCoreNavigation.Waypoint], reachedWaypoints _: [NbmapCoreNavigation.Waypoint]?, legIndex _: Swift.Int) -> Nbmap.NGLShape?
}
extension NbmapNavigation.NavigationViewControllerDelegate {
  public func navigationViewControllerDidDismiss(_ navigationViewController: NbmapNavigation.NavigationViewController, byCanceling canceled: Swift.Bool)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didArriveAt waypoint: NbmapCoreNavigation.Waypoint)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didUpdate progress: NbmapCoreNavigation.RouteProgress, with location: CoreLocation.CLLocation, rawLocation: CoreLocation.CLLocation)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didRefresh routeProgress: NbmapCoreNavigation.RouteProgress)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, willRerouteFrom location: CoreLocation.CLLocation)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didRerouteAlong route: NbmapCoreNavigation.Route)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didFailToRerouteWith error: any Swift.Error)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didSelect route: NbmapCoreNavigation.Route)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didSelect waypoint: NbmapCoreNavigation.Waypoint)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, shapeFor routes: [NbmapCoreNavigation.Route]) -> Nbmap.NGLShape?
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, imageFor annotation: any Nbmap.NGLAnnotation) -> Nbmap.NGLAnnotationImage?
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, viewFor annotation: any Nbmap.NGLAnnotation) -> Nbmap.NGLAnnotationView?
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, shouldDiscard location: CoreLocation.CLLocation) -> Swift.Bool
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didFailToUpdateAlternatives error: NbmapCoreNavigation.AlternativeRouteError)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, willTakeAlternativeRoute route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didTakeAlternativeRouteAt location: CoreLocation.CLLocation?)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didFailToTakeAlternativeRouteAt location: CoreLocation.CLLocation?)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didSubmitArrivalFeedback feedback: NbmapCoreNavigation.EndOfRouteFeedback)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, shouldPreventReroutesWhenArrivingAt waypoint: NbmapCoreNavigation.Waypoint) -> Swift.Bool
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didSelect annotation: any Nbmap.NGLAnnotation)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didRemove legIdex: Swift.Int)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didCancleRemove legIdex: Swift.Int)
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, arrivalBottomSheet waypoint: NbmapCoreNavigation.Waypoint) -> UIKit.UIViewController?
  public func navigationViewController(_ navigationViewController: NbmapNavigation.NavigationViewController, didFinishLoading style: Nbmap.NGLStyle)
  public func navigationViewController(_: NbmapNavigation.NavigationViewController, mapViewUserAnchorPoint _: NbmapNavigation.NavigationMapView) -> CoreFoundation.CGPoint
}
extension NbmapNavigation.NavigationViewControllerDelegate {
  public func navigationViewController(_: NbmapNavigation.NavigationViewController, roadNameAt _: CoreLocation.CLLocation) -> Swift.String?
  public func navigationMapViewUserAnchorPoint(_: NbmapNavigation.NavigationViewController) -> CoreFoundation.CGPoint
}
@_inheritsConvenienceInitializers @objc(NBTopBannerView) @_Concurrency.MainActor @preconcurrency open class TopBannerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBBottomBannerView) @_Concurrency.MainActor @preconcurrency open class BottomBannerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class BottomPaddingView : NbmapNavigation.BottomBannerView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBStepsInstructionView) @_Concurrency.MainActor @preconcurrency open class StepsInstructionView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class StepSwitchContenerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIFont {
  @objc dynamic public var adjustedFont: UIKit.UIFont {
    @objc get
  }
}
public protocol CameraStateTransition : AnyObject {
  var mapView: Nbmap.NGLMapView? { get }
  init(_ mapView: Nbmap.NGLMapView)
  func transitionToFollowing(_ cameraOptions: NbmapNavigation.NavMapCameraOption, completion: @escaping () -> Swift.Void)
  func transitionToOverview(_ cameraOptions: NbmapNavigation.NavMapCameraOption, completion: @escaping () -> Swift.Void)
  func update(to cameraOptions: NbmapNavigation.NavMapCameraOption, state: NbmapNavigation.NavigationCameraState)
  func cancelPendingTransition()
}
public enum MapOrnamentPosition {
  case topLeading
  case topTrailing
  public static func == (a: NbmapNavigation.MapOrnamentPosition, b: NbmapNavigation.MapOrnamentPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class LegSummaryCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func reinstallConstraints()
  @_Concurrency.MainActor @preconcurrency open func updateSection(index: Swift.Int, symbol: Swift.String, title: Swift.String, duration: Swift.String, completed: Swift.Bool)
  @objc deinit
}
extension CoreFoundation.CGSize : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
  public init(size: Swift.Double)
  public init(floatLiteral value: CoreFoundation.CGSize.FloatLiteralType)
}
@objc(NBFeedbackItem) public class FeedbackItem : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var image: UIKit.UIImage
  @objc public var feedbackType: NbmapCoreNavigation.FeedbackType
  @objc public init(title: Swift.String, image: UIKit.UIImage, feedbackType: NbmapCoreNavigation.FeedbackType)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NavigationMapStyle {
  public static let shared: NbmapNavigation.NavigationMapStyle
  open func updateNavigationMapStyle(configurationMapStyle: NbmapCoreNavigation.ConfigurationMapStyle)
  open func getRefinedConfigurationMapStyle() -> NbmapCoreNavigation.ConfigurationMapStyle
  @objc deinit
}
public enum ViewportDataSourceType {
  case raw
  case passive
  case active
  public static func == (a: NbmapNavigation.ViewportDataSourceType, b: NbmapNavigation.ViewportDataSourceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapNavigation.FeedbackViewController : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forDismissed _: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forPresented _: UIKit.UIViewController, presenting _: UIKit.UIViewController, source _: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func interactionControllerForDismissal(using _: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
}
@objc public protocol FeedbackViewControllerDelegate {
  @objc optional func feedbackViewControllerDidOpen(_ feedbackViewController: NbmapNavigation.FeedbackViewController)
  @objc(feedbackViewController:didSendFeedbackItem:UUID:) optional func feedbackViewController(_ feedbackViewController: NbmapNavigation.FeedbackViewController, didSend feedbackItem: NbmapNavigation.FeedbackItem, uuid: Foundation.UUID)
  @objc optional func feedbackViewControllerDidCancel(_ feedbackViewController: NbmapNavigation.FeedbackViewController)
}
@objc(NBFeedbackViewController) @_Concurrency.MainActor @preconcurrency public class FeedbackViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency public var sections: [NbmapNavigation.FeedbackItem]
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any NbmapNavigation.FeedbackViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency public var dataTracking: NbmapCoreNavigation.DataTracking?
  @objc @_Concurrency.MainActor @preconcurrency public init(dataTracking: NbmapCoreNavigation.DataTracking?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor @preconcurrency public func dismissFeedback()
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @objc deinit
}
extension NbmapNavigation.FeedbackViewController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in _: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_: UIKit.UICollectionView, numberOfItemsInSection _: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidScroll(_: UIKit.UIScrollView)
}
extension NbmapNavigation.FeedbackViewController : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension NbmapNavigation.FeedbackViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout _: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
open class NavMapCameraOption {
  public init()
  @available(*, unavailable)
  required public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
@objc(NBStyleManagerDelegate) public protocol StyleManagerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func locationFor(styleManager: NbmapNavigation.StyleManager) -> CoreLocation.CLLocation?
  @objc optional func styleManager(_ styleManager: NbmapNavigation.StyleManager, didApply style: NbmapNavigation.Style)
  @objc optional func styleManagerDidRefreshAppearance(_ styleManager: NbmapNavigation.StyleManager)
}
@objc(NBStyleManager) open class StyleManager : ObjectiveC.NSObject {
  @objc weak public var delegate: (any NbmapNavigation.StyleManagerDelegate)?
  @objc public var automaticallyAdjustsStyleForTimeOfDay: Swift.Bool {
    @objc get
    @objc set
  }
  public var currentStyle: NbmapNavigation.Style? {
    get
  }
  @objc public var styles: [NbmapNavigation.Style] {
    @objc get
    @objc set
  }
  required public init(_ delegate: any NbmapNavigation.StyleManagerDelegate)
  @objc deinit
  public func applyStyle(type styleType: NbmapNavigation.StyleType)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class NextInstructionLabel : NbmapNavigation.InstructionLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class NextBannerView : UIKit.UIView, NbmapNavigation.NavigationComponent {
  @_Concurrency.MainActor @preconcurrency public var isCurrentlyVisible: Swift.Bool
  @_Concurrency.MainActor @preconcurrency weak public var navigationDataEventTracking: (any NbmapCoreNavigation.NavigationEventTracking)?
  public typealias CompletionHandler = (_ completed: Swift.Bool) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, didPassVisualInstructionPoint instruction: NbmapCoreNavigation.VisualInstructionBanner, routeProgress: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency public func update(for visualInstruction: NbmapCoreNavigation.VisualInstructionBanner?, animated: Swift.Bool = true, duration: Foundation.TimeInterval = 0.5, completion: NbmapNavigation.NextBannerView.CompletionHandler? = nil)
  @_Concurrency.MainActor @preconcurrency public func show(animated: Swift.Bool = true, duration: Foundation.TimeInterval = 0.5, completion: NbmapNavigation.NextBannerView.CompletionHandler? = nil)
  @_Concurrency.MainActor @preconcurrency public func hide(animated: Swift.Bool = true, duration: Foundation.TimeInterval = 0.5, completion: NbmapNavigation.NextBannerView.CompletionHandler? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CPOrnamentsController : NbmapNavigation.NavigationComponent {
  public var navigationDataEventTracking: (any NbmapCoreNavigation.NavigationEventTracking)?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class StepInstructionView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class NavigationViewportDataSource : NbmapNavigation.ViewportDataSource {
  weak public var delegate: (any NbmapNavigation.ViewportDataSourceDelegate)?
  public var followingMobileCamera: NbmapNavigation.NavMapCameraOption
  public var followingCarPlayCamera: NbmapNavigation.NavMapCameraOption
  public var overviewMobileCamera: NbmapNavigation.NavMapCameraOption
  public var overviewCarPlayCamera: NbmapNavigation.NavMapCameraOption
  public var options: NbmapNavigation.NavigationViewportDataSourceOptions
  required public init(viewportDataSourceType: NbmapNavigation.ViewportDataSourceType = .active, navigationEnginConfig: NbmapCoreNavigation.NavigationEngineConfig = NavigationEngineConfig())
  @objc deinit
}
@objc(NBStyleType) public enum StyleType : Swift.Int, Swift.CustomStringConvertible {
  case day
  case night
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIKit.UIDevice {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isPluggedIn: Swift.Bool {
    @objc get
  }
}
extension NbmapNavigation.BottomBannerViewController {
  @_Concurrency.MainActor @preconcurrency public func reinstallConstraints()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@_inheritsConvenienceInitializers @objc(NBDataCache) public class DataCache : ObjectiveC.NSObject, NbmapNavigation.BimodalDataCache {
  @objc override dynamic public init()
  @objc public func store(_ data: Foundation.Data, forKey key: Swift.String, toDisk: Swift.Bool, completion: NbmapNavigation.CompletionHandler?)
  @objc public func data(forKey key: Swift.String?) -> Foundation.Data?
  @objc public func clearMemory()
  @objc public func clearDisk(completion: NbmapNavigation.CompletionHandler?)
  @objc deinit
}
public protocol TopBannerViewControllerDelegate : NbmapNavigation.VisualInstructionDelegate {
  func topBanner(_ banner: NbmapNavigation.TopBannerViewController, didSwipeInDirection direction: UIKit.UISwipeGestureRecognizer.Direction)
  func topBanner(_ banner: NbmapNavigation.TopBannerViewController, didSelect legIndex: Swift.Int, stepIndex: Swift.Int, cell: NbmapNavigation.StepTableViewCell)
  func topBanner(_ banner: NbmapNavigation.TopBannerViewController, willDisplayStepsController: NbmapNavigation.StepsViewController)
  func topBanner(_ banner: NbmapNavigation.TopBannerViewController, didDisplayStepsController: NbmapNavigation.StepsViewController)
  func topBanner(_ banner: NbmapNavigation.TopBannerViewController, willDismissStepsController: NbmapNavigation.StepsViewController)
  func topBanner(_ banner: NbmapNavigation.TopBannerViewController, didDismissStepsController: NbmapNavigation.StepsViewController)
}
extension NbmapNavigation.TopBannerViewControllerDelegate {
  public func topBanner(_: NbmapNavigation.TopBannerViewController, didSwipeInDirection _: UIKit.UISwipeGestureRecognizer.Direction)
  public func topBanner(_: NbmapNavigation.TopBannerViewController, didSelect _: Swift.Int, stepIndex _: Swift.Int, cell _: NbmapNavigation.StepTableViewCell)
  public func topBanner(_: NbmapNavigation.TopBannerViewController, willDisplayStepsController _: NbmapNavigation.StepsViewController)
  public func topBanner(_: NbmapNavigation.TopBannerViewController, didDisplayStepsController _: NbmapNavigation.StepsViewController)
  public func topBanner(_: NbmapNavigation.TopBannerViewController, willDismissStepsController _: NbmapNavigation.StepsViewController)
  public func topBanner(_: NbmapNavigation.TopBannerViewController, didDismissStepsController _: NbmapNavigation.StepsViewController)
}
@available(iOS 13.0, *)
public protocol CarPlayManagerDelegate : AnyObject {
  func carPlayManager(_ carPlayManager: NbmapNavigation.CarPlayManager, leadingNavigationBarButtonsCompatibleWith traitCollection: UIKit.UITraitCollection, in template: CarPlay.CPTemplate, for activity: NbmapNavigation.CarPlayActivity) -> [CarPlay.CPBarButton]?
  func carPlayManager(_ carPlayManager: NbmapNavigation.CarPlayManager, trailingNavigationBarButtonsCompatibleWith traitCollection: UIKit.UITraitCollection, in template: CarPlay.CPTemplate, for activity: NbmapNavigation.CarPlayActivity) -> [CarPlay.CPBarButton]?
  func carPlayManager(_ carplayManager: NbmapNavigation.CarPlayManager, mapButtonsCompatibleWith traitCollection: UIKit.UITraitCollection, in template: CarPlay.CPTemplate, for activity: NbmapNavigation.CarPlayActivity) -> [CarPlay.CPMapButton]?
  func carPlayManager(_ carPlayManager: NbmapNavigation.CarPlayManager, searchTemplate: CarPlay.CPSearchTemplate, updatedSearchText searchText: Swift.String, completionHandler: @escaping ([CarPlay.CPListItem]) -> Swift.Void)
  func carPlayManager(_ carPlayManager: NbmapNavigation.CarPlayManager, searchTemplate: CarPlay.CPSearchTemplate, selectedResult item: CarPlay.CPListItem, completionHandler: @escaping () -> Swift.Void)
  func carPlayManager(_ carPlayManager: NbmapNavigation.CarPlayManager, didBeginNavigationWith navigationService: any NbmapCoreNavigation.NavigationService)
  func carPlayManagerDidEndNavigation(_ carPlayManager: NbmapNavigation.CarPlayManager)
  func carplayManagerShouldDisableIdleTimer(_ carPlayManager: NbmapNavigation.CarPlayManager) -> Swift.Bool
  func carPlayManager(_ carPlayManager: NbmapNavigation.CarPlayManager, navigationServiceFor routes: [NbmapCoreNavigation.Route], routeIndex: Swift.Int, routeOptions: NbmapCoreNavigation.RouteOptions, desiredSimulationMode: NbmapCoreNavigation.SimulationMode) -> (any NbmapCoreNavigation.NavigationService)?
  func carPlayManager(_ carPlayManager: NbmapNavigation.CarPlayManager, templateWillAppear template: CarPlay.CPTemplate, animated: Swift.Bool)
  func carPlayManager(_ carPlayManager: NbmapNavigation.CarPlayManager, templateDidAppear template: CarPlay.CPTemplate, animated: Swift.Bool)
  func carPlayManager(_ carPlayManager: NbmapNavigation.CarPlayManager, templateWillDisappear template: CarPlay.CPTemplate, animated: Swift.Bool)
  func carPlayManager(_ carPlayManager: NbmapNavigation.CarPlayManager, templateDidDisappear template: CarPlay.CPTemplate, animated: Swift.Bool)
}
@available(iOS 13.0, *)
extension NbmapNavigation.CarPlayManagerDelegate {
  public func carPlayManager(_: NbmapNavigation.CarPlayManager, leadingNavigationBarButtonsCompatibleWith _: UIKit.UITraitCollection, in _: CarPlay.CPTemplate, for _: NbmapNavigation.CarPlayActivity) -> [CarPlay.CPBarButton]?
  public func carPlayManager(_: NbmapNavigation.CarPlayManager, trailingNavigationBarButtonsCompatibleWith _: UIKit.UITraitCollection, in _: CarPlay.CPTemplate, for _: NbmapNavigation.CarPlayActivity) -> [CarPlay.CPBarButton]?
  public func carPlayManager(_: NbmapNavigation.CarPlayManager, mapButtonsCompatibleWith _: UIKit.UITraitCollection, in _: CarPlay.CPTemplate, for _: NbmapNavigation.CarPlayActivity) -> [CarPlay.CPMapButton]?
  public func carPlayManager(_: NbmapNavigation.CarPlayManager, searchTemplate _: CarPlay.CPSearchTemplate, updatedSearchText _: Swift.String, completionHandler _: @escaping ([CarPlay.CPListItem]) -> Swift.Void)
  public func carPlayManager(_: NbmapNavigation.CarPlayManager, searchTemplate _: CarPlay.CPSearchTemplate, selectedResult _: CarPlay.CPListItem, completionHandler _: @escaping () -> Swift.Void)
  public func carPlayManager(_: NbmapNavigation.CarPlayManager, didBeginNavigationWith _: any NbmapCoreNavigation.NavigationService)
  public func carPlayManagerDidEndNavigation(_: NbmapNavigation.CarPlayManager)
  public func carplayManagerShouldDisableIdleTimer(_: NbmapNavigation.CarPlayManager) -> Swift.Bool
  public func carPlayManager(_: NbmapNavigation.CarPlayManager, navigationServiceFor _: [NbmapCoreNavigation.Route], routeIndex _: Swift.Int, routeOptions _: NbmapCoreNavigation.RouteOptions, desiredSimulationMode _: NbmapCoreNavigation.SimulationMode) -> (any NbmapCoreNavigation.NavigationService)?
  public func carPlayManager(_: NbmapNavigation.CarPlayManager, templateWillAppear _: CarPlay.CPTemplate, animated _: Swift.Bool)
  public func carPlayManager(_: NbmapNavigation.CarPlayManager, templateDidAppear _: CarPlay.CPTemplate, animated _: Swift.Bool)
  public func carPlayManager(_: NbmapNavigation.CarPlayManager, templateWillDisappear _: CarPlay.CPTemplate, animated _: Swift.Bool)
  public func carPlayManager(_: NbmapNavigation.CarPlayManager, templateDidDisappear _: CarPlay.CPTemplate, animated _: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers open class NBGeocoder : ObjectiveC.NSObject {
  public static let shared: NbmapNavigation.NBGeocoder
  @discardableResult
  open func search(query: Swift.String, at location: Swift.String? = nil, limit: Swift.String? = nil, completionHandler: @escaping (_ searchItems: [NbmapNavigation.NavigationGeocodedPlacemark]?, _ error: Foundation.NSError?) -> Swift.Void) -> Foundation.URLSessionDataTask
  @objc override dynamic public init()
  @objc deinit
}
public enum PointSide {
  case left
  case right
  case unknown
  public static func == (a: NbmapNavigation.PointSide, b: NbmapNavigation.PointSide) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ReroutingCheckUtils {
  public static func checkLocationFarawayFomRoute(location: CoreLocation.CLLocation, visiblePolylines: [NBTurf.NBPolyline], routeProgress: NbmapCoreNavigation.RouteProgress) -> Swift.Bool
  public static func calculateTargetPointSide(pointA: CoreLocation.CLLocationCoordinate2D, pointC: CoreLocation.CLLocationCoordinate2D, pointB: CoreLocation.CLLocationCoordinate2D) -> NbmapNavigation.PointSide
  @objc deinit
}
public typealias UserCourseView = UIKit.UIView & NbmapNavigation.CourseUpdatable
public enum UserLocationStyle {
  case courseView(_: any UIKit.UIView & NbmapNavigation.CourseUpdatable = UserPuckCourseView(frame: CGRect(origin: .zero, size: 75.0)))
  case puck2D
}
public protocol SpeechSynthesizing : AnyObject {
  var delegate: (any NbmapNavigation.SpeechSynthesizingDelegate)? { get set }
  var muted: Swift.Bool { get set }
  var volume: Swift.Float { get set }
  var isSpeaking: Swift.Bool { get }
  var locale: Foundation.Locale? { get set }
  var managesAudioSession: Swift.Bool { get set }
  func prepareIncomingSpokenInstructions(_ instructions: [NbmapCoreNavigation.SpokenInstruction], locale: Foundation.Locale?)
  func speak(_ instruction: NbmapCoreNavigation.SpokenInstruction, during legProgress: NbmapCoreNavigation.RouteLegProgress, locale: Foundation.Locale?)
  func stopSpeaking()
  func interruptSpeaking()
}
public protocol SpeechSynthesizingDelegate : AnyObject, NbmapCoreNavigation.UnimplementedLogging {
  func speechSynthesizer(_ speechSynthesizer: any NbmapNavigation.SpeechSynthesizing, encounteredError error: NbmapNavigation.SpeechError)
  func speechSynthesizer(_ speechSynthesizer: any NbmapNavigation.SpeechSynthesizing, didSpeak instruction: NbmapCoreNavigation.SpokenInstruction, with error: NbmapNavigation.SpeechError?)
  func speechSynthesizer(_ speechSynthesizer: any NbmapNavigation.SpeechSynthesizing, didInterrupt interruptedInstruction: NbmapCoreNavigation.SpokenInstruction, with interruptingInstruction: NbmapCoreNavigation.SpokenInstruction)
  func speechSynthesizer(_ speechSynthesizer: any NbmapNavigation.SpeechSynthesizing, willSpeak instruction: NbmapCoreNavigation.SpokenInstruction) -> NbmapCoreNavigation.SpokenInstruction?
}
public struct Solar {
  public let coordinate: CoreLocation.CLLocationCoordinate2D
  public var date: Foundation.Date {
    get
  }
  public var sunrise: Foundation.Date? {
    get
  }
  public var sunset: Foundation.Date? {
    get
  }
  public var civilSunrise: Foundation.Date? {
    get
  }
  public var civilSunset: Foundation.Date? {
    get
  }
  public var nauticalSunrise: Foundation.Date? {
    get
  }
  public var nauticalSunset: Foundation.Date? {
    get
  }
  public var astronomicalSunrise: Foundation.Date? {
    get
  }
  public var astronomicalSunset: Foundation.Date? {
    get
  }
  public init?(for date: Foundation.Date = Date(), coordinate: CoreLocation.CLLocationCoordinate2D)
  public mutating func calculate()
}
extension NbmapNavigation.Solar {
  public var isDaytime: Swift.Bool {
    get
  }
  public var isNighttime: Swift.Bool {
    get
  }
}
public protocol ViewportDataSource : AnyObject {
  var delegate: (any NbmapNavigation.ViewportDataSourceDelegate)? { get set }
  var followingMobileCamera: NbmapNavigation.NavMapCameraOption { get }
  var followingCarPlayCamera: NbmapNavigation.NavMapCameraOption { get }
  var overviewMobileCamera: NbmapNavigation.NavMapCameraOption { get }
  var overviewCarPlayCamera: NbmapNavigation.NavMapCameraOption { get }
}
public protocol ViewportDataSourceDelegate : AnyObject {
  func viewportDataSource(_ dataSource: any NbmapNavigation.ViewportDataSource, didUpdate cameraOptions: [Swift.String : NbmapNavigation.NavMapCameraOption])
  func viewportDataSourceRetriveMapview(_: any NbmapNavigation.ViewportDataSource) -> NbmapNavigation.NavigationMapView?
}
@_inheritsConvenienceInitializers @objc(NBStyle) open class Style : ObjectiveC.NSObject {
  @objc public var tintColor: UIKit.UIColor?
  public var statusBarStyle: UIKit.UIStatusBarStyle?
  @objc public var fontFamily: Swift.String?
  @objc public var styleType: NbmapNavigation.StyleType
  @objc open var mapStyleURL: Foundation.URL
  @objc open var previewMapStyleURL: Foundation.URL
  @objc open func apply()
  @objc override required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBButton) @_Concurrency.MainActor @preconcurrency open class Button : NbmapNavigation.StylableButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBCancelButton) @_Concurrency.MainActor @preconcurrency open class CancelButton : NbmapNavigation.Button {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBArrivedButton) @_Concurrency.MainActor @preconcurrency open class ArrivedButton : NbmapNavigation.Button {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBOverviewButton) @_Concurrency.MainActor @preconcurrency open class OverviewButton : NbmapNavigation.FloatingButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBDismissButton) @_Concurrency.MainActor @preconcurrency open class DismissButton : NbmapNavigation.Button {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBFloatingButton) @_Concurrency.MainActor @preconcurrency open class FloatingButton : NbmapNavigation.Button {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBReportButton) @_Concurrency.MainActor @preconcurrency public class ReportButton : NbmapNavigation.Button {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBHighlightedButton) @_Concurrency.MainActor @preconcurrency public class HighlightedButton : NbmapNavigation.Button {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @objc(NBResumeButton) @_Concurrency.MainActor @preconcurrency public class ResumeButton : UIKit.UIControl {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForInterfaceBuilder()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBDraggableView) @_Concurrency.MainActor @preconcurrency open class StepListIndicatorView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var gradientColors: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBStylableLabel) @_Concurrency.MainActor @preconcurrency open class StylableLabel : UIKit.UILabel {
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var normalTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var normalFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBStylableView) @_Concurrency.MainActor @preconcurrency open class StylableView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBStylableTextView) @_Concurrency.MainActor @preconcurrency open class StylableTextView : UIKit.UITextView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var normalTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(iOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBDistanceLabel) @_Concurrency.MainActor @preconcurrency open class DistanceLabel : NbmapNavigation.StylableLabel {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var valueTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var unitTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var valueFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var unitFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBPrimaryLabel) @_Concurrency.MainActor @preconcurrency open class PrimaryLabel : NbmapNavigation.InstructionLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBSecondaryLabel) @_Concurrency.MainActor @preconcurrency open class SecondaryLabel : NbmapNavigation.InstructionLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBCompleteLabel) @_Concurrency.MainActor @preconcurrency open class CompleteLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBTimeRemainingLabel) @_Concurrency.MainActor @preconcurrency open class TimeRemainingLabel : NbmapNavigation.StylableLabel {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var trafficUnknownColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var trafficLowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var trafficModerateColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var trafficHeavyColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var trafficSevereColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBDistanceRemainingLabel) @_Concurrency.MainActor @preconcurrency open class DistanceRemainingLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBArrivalTimeLabel) @_Concurrency.MainActor @preconcurrency open class ArrivalTimeLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBTitleLabel) @_Concurrency.MainActor @preconcurrency open class TitleLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBSubtitleLabel) @_Concurrency.MainActor @preconcurrency open class SubtitleLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBWayNameView) @_Concurrency.MainActor @preconcurrency open class WayNameView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var layer: QuartzCore.CALayer {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBWayNameLabel) @_Concurrency.MainActor @preconcurrency open class WayNameLabel : NbmapNavigation.StylableLabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBProgressBar) @_Concurrency.MainActor @preconcurrency public class ProgressBar : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var barColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBLineView) @_Concurrency.MainActor @preconcurrency public class LineView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var lineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBSeparatorView) @_Concurrency.MainActor @preconcurrency public class SeparatorView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBStylableButton) @_Concurrency.MainActor @preconcurrency open class StylableButton : UIKit.UIButton {
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var textFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBManeuverContainerView) @_Concurrency.MainActor @preconcurrency open class ManeuverContainerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBInstructionsBannerContentView) @_Concurrency.MainActor @preconcurrency open class InstructionsBannerContentView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBBottomBannerContentView) @_Concurrency.MainActor @preconcurrency open class BottomBannerContentView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBMarkerView) @_Concurrency.MainActor @preconcurrency public class MarkerView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var innerColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var shadowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var pinColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var strokeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum SpokenInstructionErrorCode : Swift.Int {
  case unknown
  case audioPlayerFailedToPlay
  case emptyNbmapSpeechResponse
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NBErrorCode : Swift.Int {
  case unknown
  case spokenInstructionFailed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol CarplayOperationsDelegate : AnyObject {
  func onRouteFeatched(origin: NbmapCoreNavigation.Waypoint, destination: NbmapCoreNavigation.Waypoint, routes: [NbmapCoreNavigation.Route])
  func onNavigationStart(routes: [NbmapCoreNavigation.Route])
  func onNavigationTerminated()
  func onRouteCancled()
}
@_hasMissingDesignatedInitializers public class CarplayOperationsManager {
  public static let shared: NbmapNavigation.CarplayOperationsManager
  weak public var carplayDelegate: (any NbmapNavigation.CarplayOperationsDelegate)?
  weak public var navigationDelegate: (any NbmapNavigation.CarplayOperationsDelegate)?
  public func onRouteFeatched(fromCarplay carplay: Swift.Bool = false, origin: NbmapCoreNavigation.Waypoint, destination: NbmapCoreNavigation.Waypoint, routes: [NbmapCoreNavigation.Route])
  public func onNavigationStart(fromCarplay carplay: Swift.Bool = false, routes: [NbmapCoreNavigation.Route])
  public func onNavigationTerminated(fromCarplay carplay: Swift.Bool = false)
  public func onRouteCancled(fromCarplay carplay: Swift.Bool = false)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class RouteDurationSymbol : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public init(duration: Swift.Double, isPrimary: Swift.Bool, durationSymbolType: NbmapNavigation.NavigationMapView.DurationSymbolType)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func screenshotImage() -> UIKit.UIImage?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class TopBannerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var navigationDataEventTracking: (any NbmapCoreNavigation.NavigationEventTracking)?
  @_Concurrency.MainActor @preconcurrency public var lanesView: NbmapNavigation.LanesView
  @_Concurrency.MainActor @preconcurrency public var nextBannerView: NbmapNavigation.NextBannerView
  @_Concurrency.MainActor @preconcurrency public var statusView: NbmapNavigation.StatusView
  @_Concurrency.MainActor @preconcurrency public var junctionView: NbmapNavigation.JunctionView
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public var isDisplayingPreviewInstructions: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func preview(step stepOverride: NbmapCoreNavigation.RouteStep? = nil, maneuverStep _: NbmapCoreNavigation.RouteStep, distance: CoreLocation.CLLocationDistance, steps: [NbmapCoreNavigation.RouteStep], completion: NbmapNavigation.CompletionHandler? = nil)
  @_Concurrency.MainActor @preconcurrency public func stopPreviewing(showingSecondaryChildren: Swift.Bool = true)
}
extension NbmapNavigation.TopBannerViewController : NbmapNavigation.NavigationComponent {
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, didUpdate _: [CoreLocation.CLLocation])
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didRerouteAlong _: NbmapCoreNavigation.Route, at _: CoreLocation.CLLocation?, proactive _: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didFailToRerouteWith _: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, routeController _: NbmapCoreNavigation.RouteController, didRerouteAlong _: NbmapCoreNavigation.Route)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, didUpdate progress: NbmapCoreNavigation.RouteProgress, with _: CoreLocation.CLLocation, rawLocation _: CoreLocation.CLLocation)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, didRefresh routeProgress: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency public func updateTopBannerInfo(progress: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didPassVisualInstructionPoint instruction: NbmapCoreNavigation.VisualInstructionBanner, routeProgress: NbmapCoreNavigation.RouteProgress)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, willRerouteFrom _: CoreLocation.CLLocation)
  @_Concurrency.MainActor @preconcurrency public func navigationService(_: any NbmapCoreNavigation.NavigationService, willEndSimulating _: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
}
extension NbmapNavigation.TopBannerViewController : NbmapNavigation.InstructionsBannerViewDelegate {
  @_Concurrency.MainActor @preconcurrency public func didTapInstructionsBanner(_: NbmapNavigation.BaseInstructionsBannerView)
  @_Concurrency.MainActor @preconcurrency public func didSwipeInstructionsBanner(_: NbmapNavigation.BaseInstructionsBannerView, swipeDirection direction: UIKit.UISwipeGestureRecognizer.Direction)
  @_Concurrency.MainActor @preconcurrency public func label(_ label: NbmapNavigation.InstructionLabel, willPresent instruction: NbmapCoreNavigation.VisualInstruction, as presented: Foundation.NSAttributedString) -> Foundation.NSAttributedString?
}
extension NbmapNavigation.TopBannerViewController : NbmapNavigation.CarPlayConnectionObserver {
  @_Concurrency.MainActor @preconcurrency public func didConnectToCarPlay()
  @_Concurrency.MainActor @preconcurrency public func didDisconnectFromCarPlay()
}
extension NbmapNavigation.TopBannerViewController : NbmapNavigation.NavigationStatusPresenter {
  @_Concurrency.MainActor @preconcurrency public func show(_ status: NbmapNavigation.StatusView.Status)
  @_Concurrency.MainActor @preconcurrency public func hide(_ status: NbmapNavigation.StatusView.Status)
}
extension NbmapNavigation.TopBannerViewController : NbmapNavigation.NavigationMapInteractionObserver {
  @_Concurrency.MainActor @preconcurrency public func navigationViewController(didCenterOn _: CoreLocation.CLLocation)
}
public typealias CompletionHandler = () -> Swift.Void
@objc(NBBimodalCache) public protocol BimodalCache {
  @objc func clearMemory()
  @objc func clearDisk(completion: NbmapNavigation.CompletionHandler?)
}
@objc(NBBimodalImageCache) public protocol BimodalImageCache : NbmapNavigation.BimodalCache {
  @objc func store(_ image: UIKit.UIImage, forKey key: Swift.String, toDisk: Swift.Bool, completion completionBlock: NbmapNavigation.CompletionHandler?)
  @objc func image(forKey: Swift.String?) -> UIKit.UIImage?
}
@objc(NBBimodalDataCache) public protocol BimodalDataCache : NbmapNavigation.BimodalCache {
  @objc func store(_ data: Foundation.Data, forKey key: Swift.String, toDisk: Swift.Bool, completion completionBlock: NbmapNavigation.CompletionHandler?)
  @objc func data(forKey: Swift.String?) -> Foundation.Data?
}
public struct RecentItem : Swift.Equatable, Swift.Codable {
  public var geocodedPlacemark: NbmapNavigation.NavigationGeocodedPlacemark {
    get
  }
  public init(_ geocodedPlacemark: NbmapNavigation.NavigationGeocodedPlacemark)
  public static func loadDefaults() -> [NbmapNavigation.RecentItem]
  public func matches(_ searchText: Swift.String) -> Swift.Bool
  public static func == (lhs: NbmapNavigation.RecentItem, rhs: NbmapNavigation.RecentItem) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Array where Element == NbmapNavigation.RecentItem {
  @discardableResult
  public func save() -> Swift.Bool
  public mutating func add(_ recentItem: NbmapNavigation.RecentItem)
  public mutating func remove(_ recentItem: NbmapNavigation.RecentItem)
}
extension UIKit.UIEdgeInsets {
  public static func + (left: UIKit.UIEdgeInsets, right: UIKit.UIEdgeInsets) -> UIKit.UIEdgeInsets
}
extension UIKit.UIEdgeInsets : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
  public init(floatLiteral value: UIKit.UIEdgeInsets.FloatLiteralType)
}
public class NavigationCameraStateTransition : NbmapNavigation.CameraStateTransition {
  weak public var mapView: Nbmap.NGLMapView?
  required public init(_ mapView: Nbmap.NGLMapView)
  public func transitionToFollowing(_ cameraOptions: NbmapNavigation.NavMapCameraOption, completion: @escaping () -> Swift.Void)
  public func transitionToOverview(_ cameraOptions: NbmapNavigation.NavMapCameraOption, completion: @escaping () -> Swift.Void)
  public func cancelPendingTransition()
  public func update(to cameraOptions: NbmapNavigation.NavMapCameraOption, state: NbmapNavigation.NavigationCameraState)
  @objc deinit
}
extension NbmapNavigation.ManeuversStyleKit.ResizingBehavior : Swift.Equatable {}
extension NbmapNavigation.ManeuversStyleKit.ResizingBehavior : Swift.Hashable {}
extension NbmapNavigation.ManeuversStyleKit.ResizingBehavior : Swift.RawRepresentable {}
extension NbmapNavigation.SpeechFailureAction : Swift.Equatable {}
extension NbmapNavigation.SpeechFailureAction : Swift.Hashable {}
extension NbmapNavigation.SpeechFailureAction : Swift.RawRepresentable {}
extension NbmapNavigation.NavigationViewController : NbmapNavigation.InstructionsBannerViewDelegate {}
extension NbmapNavigation.NavigationMapView.DurationSymbolType : Swift.Equatable {}
extension NbmapNavigation.NavigationMapView.DurationSymbolType : Swift.Hashable {}
extension NbmapNavigation.NavigationMapView.DurationSymbolType : Swift.RawRepresentable {}
extension NbmapNavigation.SpeedLimitStyleKit.ResizingBehavior : Swift.Equatable {}
extension NbmapNavigation.SpeedLimitStyleKit.ResizingBehavior : Swift.Hashable {}
extension NbmapNavigation.SpeedLimitStyleKit.ResizingBehavior : Swift.RawRepresentable {}
extension NbmapNavigation.CarPlayActivity : Swift.Equatable {}
extension NbmapNavigation.CarPlayActivity : Swift.Hashable {}
extension NbmapNavigation.CarPlayActivity : Swift.RawRepresentable {}
extension CoreLocation.CLLocation.CodingKeys : Swift.Equatable {}
extension CoreLocation.CLLocation.CodingKeys : Swift.Hashable {}
extension CoreLocation.CLLocation.CodingKeys : Swift.RawRepresentable {}
extension NbmapNavigation.BannerContainerView.`Type` : Swift.Equatable {}
extension NbmapNavigation.BannerContainerView.`Type` : Swift.Hashable {}
extension NbmapNavigation.BannerContainerView.State : Swift.Equatable {}
extension NbmapNavigation.BannerContainerView.State : Swift.Hashable {}
extension NbmapNavigation.NavigationCameraType : Swift.Equatable {}
extension NbmapNavigation.NavigationCameraType : Swift.Hashable {}
extension NbmapNavigation.LanesStyleKit.ResizingBehavior : Swift.Equatable {}
extension NbmapNavigation.LanesStyleKit.ResizingBehavior : Swift.Hashable {}
extension NbmapNavigation.LanesStyleKit.ResizingBehavior : Swift.RawRepresentable {}
extension NbmapNavigation.NavigationCameraState : Swift.Equatable {}
extension NbmapNavigation.NavigationCameraState : Swift.Hashable {}
extension NbmapNavigation.MapOrnamentPosition : Swift.Equatable {}
extension NbmapNavigation.MapOrnamentPosition : Swift.Hashable {}
extension NbmapNavigation.ViewportDataSourceType : Swift.Equatable {}
extension NbmapNavigation.ViewportDataSourceType : Swift.Hashable {}
extension NbmapNavigation.StyleType : Swift.Equatable {}
extension NbmapNavigation.StyleType : Swift.Hashable {}
extension NbmapNavigation.StyleType : Swift.RawRepresentable {}
extension NbmapNavigation.PointSide : Swift.Equatable {}
extension NbmapNavigation.PointSide : Swift.Hashable {}
extension NbmapNavigation.SpokenInstructionErrorCode : Swift.Equatable {}
extension NbmapNavigation.SpokenInstructionErrorCode : Swift.Hashable {}
extension NbmapNavigation.SpokenInstructionErrorCode : Swift.RawRepresentable {}
extension NbmapNavigation.NBErrorCode : Swift.Equatable {}
extension NbmapNavigation.NBErrorCode : Swift.Hashable {}
extension NbmapNavigation.NBErrorCode : Swift.RawRepresentable {}
